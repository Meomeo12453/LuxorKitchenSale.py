import streamlit as st
from PIL import Image
import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
import colorsys
from io import BytesIO
from openpyxl import load_workbook
from openpyxl.styles import PatternFill, Alignment, Font
import random
import base64
import uuid

# ========== LOGO & GIAO DI·ªÜN =============
st.set_page_config(page_title="Sales Dashboard MiniApp", layout="wide")

# ƒê·∫©y layout xu·ªëng ƒë·ªÉ logo kh√¥ng b·ªã c·∫Øt
for _ in range(4):
    st.write("")

st.markdown("""
    <style>
    .block-container {padding-top:0.7rem; max-width:100vw !important;}
    .stApp {background: #F7F8FA;}
    img { border-radius: 0 !important; }
    h1, h2, h3 { font-size: 1.18rem !important; font-weight:600; }
    </style>
""", unsafe_allow_html=True)

LOGO_PATHS = [
    "logo-daba.png",
    "ef5ac011-857d-4b32-bd70-ef9ac3817106.png"
]
logo = None
for path in LOGO_PATHS:
    if os.path.exists(path):
        logo = Image.open(path)
        break

if logo is not None:
    desired_height = 36
    w, h = logo.size
    new_width = int((w / h) * desired_height)
    logo_resized = logo.resize((new_width, desired_height))
    buffered = BytesIO()
    logo_resized.save(buffered, format="PNG")
    img_str = base64.b64encode(buffered.getvalue()).decode()
    st.markdown(
        f"""
        <div style="display:flex;flex-direction:column;align-items:center;justify-content:center;width:100%;padding-top:4px;padding-bottom:0;">
            <img src="data:image/png;base64,{img_str}" 
                 width="{new_width}" height="{desired_height}" style="display:block;margin:auto;" />
            <div style="height:5px;"></div>
        </div>
        """,
        unsafe_allow_html=True
    )
else:
    st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y logo! Vui l√≤ng ki·ªÉm tra l·∫°i t√™n file/logo trong th∆∞ m·ª•c app.")

st.markdown(
    "<div style='text-align:center;font-size:16px;color:#1570af;font-weight:600;'>Hotline: 0909.625.808</div>",
    unsafe_allow_html=True)
st.markdown(
    "<div style='text-align:center;font-size:14px;color:#555;'>ƒê·ªãa ch·ªâ: L·∫ßu 9, Pearl Plaza, 561A ƒêi·ªán Bi√™n Ph·ªß, P.25, Q. B√¨nh Th·∫°nh, TP.HCM</div>",
    unsafe_allow_html=True)
st.markdown("<hr style='margin:10px 0 20px 0;border:1px solid #EEE;'>", unsafe_allow_html=True)

# ========== CONTROL ==========
st.markdown("### üîé T√πy ch·ªçn ph√¢n t√≠ch")
col1, col2 = st.columns([2, 1])
with col1:
    chart_type = st.radio(
        "Ch·ªçn lo·∫°i bi·ªÉu ƒë·ªì:",
        ["Bi·ªÉu ƒë·ªì c·ªôt ch·ªìng", "S∆° ƒë·ªì Sunburst", "Bi·ªÉu ƒë·ªì Pareto", "Bi·ªÉu ƒë·ªì tr√≤n (Pie)"],
        horizontal=True
    )
with col2:
    filter_nganh = st.multiselect("L·ªçc theo nh√≥m kh√°ch h√†ng:", ["Catalyst", "Visionary", "Trailblazer"], default=[])

st.markdown("<hr style='margin:10px 0 20px 0;border:1px solid #EEE;'>", unsafe_allow_html=True)

# ======= MULTI FILE UPLOAD =======
st.markdown("### 1. T·∫£i l√™n t·ªëi ƒëa 10 file Excel (.xlsx)")
uploaded_files = st.file_uploader(
    "**Ch·ªçn nhi·ªÅu file ho·∫∑c k√©o th·∫£ nhi·ªÅu file Excel**",
    type="xlsx",
    accept_multiple_files=True,
    help="Ch·ªâ nh·∫≠n Excel, <200MB m·ªói file. C√°c file ph·∫£i c√πng c·∫•u tr√∫c c·ªôt."
)
if not uploaded_files:
    st.info("üí° H√£y upload 1 ho·∫∑c nhi·ªÅu file Excel m·∫´u ƒë·ªÉ b·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng Dashboard.")
    with st.expander("üìã Xem h∆∞·ªõng d·∫´n & file m·∫´u", expanded=False):
        st.markdown(
            "- Ch·ªçn ho·∫∑c k√©o th·∫£ **1‚Äì10 file Excel**.\n"
            "- File c·∫ßn c√°c c·ªôt: **M√£ kh√°ch h√†ng, T√™n kh√°ch h√†ng, Nh√≥m kh√°ch h√†ng, T·ªïng b√°n tr·ª´ tr·∫£ h√†ng, Ghi ch√∫**.\n"
            "- N·∫øu l·ªói, ki·ªÉm tra l·∫°i ti√™u ƒë·ªÅ c·ªôt trong file Excel."
        )
    st.stop()

# ===== G·ªòP & L√ÄM S·∫†CH D·ªÆ LI·ªÜU =====
dfs = []
for f in uploaded_files[:10]:
    dft = pd.read_excel(f)
    dfs.append(dft)
df = pd.concat(dfs, ignore_index=True)

# C·∫£nh b√°o font ti·∫øng Vi·ªát trong t√™n KH
if any(df['T√™n kh√°ch h√†ng'].astype(str).str.contains('[^\x00-\x7F]', na=False)):
    st.info("‚ÑπÔ∏è File c√≥ ch·ª©a k√Ω t·ª± ƒë·∫∑c bi·ªát ho·∫∑c ti·∫øng Vi·ªát. N·∫øu b·ªã l·ªói font khi m·ªü file Excel, h√£y l∆∞u l·∫°i b·∫±ng Excel phi√™n b·∫£n qu·ªëc t·∫ø ho·∫∑c UTF-8.")

# Ki·ªÉm tra c·ªôt b·∫Øt bu·ªôc (ch·∫•p nh·∫≠n g·ª£i √Ω check c·ªôt kh√¥ng d·∫•u)
required_cols = ['M√£ kh√°ch h√†ng','Nh√≥m kh√°ch h√†ng','T·ªïng b√°n tr·ª´ tr·∫£ h√†ng','Ghi ch√∫','T√™n kh√°ch h√†ng']
missing_cols = [col for col in required_cols if col not in df.columns]
if missing_cols:
    all_cols_lower = [c.lower().replace(" ", "").replace("_", "") for c in df.columns]
    for req in required_cols:
        if req.lower().replace(" ", "").replace("_", "") not in all_cols_lower:
            st.error(f"Thi·∫øu c·ªôt '{req}' trong file Excel. H√£y ki·ªÉm tra l·∫°i ti√™u ƒë·ªÅ c·ªôt (c√≥ th·ªÉ b·ªã thi·∫øu d·∫•u ho·∫∑c sai ch√≠nh t·∫£)!")
    st.stop()

# C·∫£nh b√°o nhi·ªÅu m√£ KH tr√πng
n_trung = len(df) - df['M√£ kh√°ch h√†ng'].nunique()
if n_trung > 0:
    st.warning(f"‚ö†Ô∏è C√≥ {n_trung} d√≤ng d·ªØ li·ªáu b·ªã tr√πng m√£ kh√°ch h√†ng v√† ƒë√£ b·ªã lo·∫°i b·ªè. Vui l√≤ng ki·ªÉm tra file g·ªëc.")

# Chu·∫©n h√≥a d·ªØ li·ªáu
df['M√£ kh√°ch h√†ng'] = df['M√£ kh√°ch h√†ng'].astype(str).str.strip()
df['Ghi ch√∫'] = df['Ghi ch√∫'].astype(str).str.strip()
df['Ghi ch√∫'] = df['Ghi ch√∫'].replace({'None': None, 'nan': None, 'NaN': None, '': None})
df['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'] = pd.to_numeric(df['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'], errors='coerce').fillna(0)
df = df.drop_duplicates(subset=['M√£ kh√°ch h√†ng'], keep='first')

# C·∫£nh b√°o n·∫øu doanh s·ªë to√†n b·ªô = 0 ho·∫∑c thi·∫øu d·ªØ li·ªáu
if (df['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'] == 0).all():
    st.warning("‚ö†Ô∏è T·∫•t c·∫£ doanh s·ªë ƒë·ªÅu b·∫±ng 0. Ki·ªÉm tra l·∫°i d·ªØ li·ªáu ƒë·∫ßu v√†o!")
if df['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'].isnull().any():
    st.warning("‚ö†Ô∏è C√≥ d√≤ng b·ªã thi·∫øu doanh s·ªë. ƒê√£ t·ª± ƒë·ªông ƒëi·ªÅn 0 nh∆∞ng n√™n ki·ªÉm tra l·∫°i file g·ªëc.")

null_kh = df['M√£ kh√°ch h√†ng'].isnull().sum()
if null_kh > 0:
    st.warning(f"‚ö†Ô∏è C√≥ {null_kh} d√≤ng thi·∫øu m√£ kh√°ch h√†ng! ƒê√£ lo·∫°i b·ªè kh·ªèi k·∫øt qu·∫£.")

# C·∫£nh b√°o ghi ch√∫ nhi·ªÅu m√£ ho·∫∑c k√Ω t·ª± l·∫°
if df['Ghi ch√∫'].str.contains(',|;|/|\\| ').any():
    st.warning("‚ö†Ô∏è M·ªôt s·ªë d√≤ng 'Ghi ch√∫' ch·ª©a nhi·ªÅu m√£ ho·∫∑c k√Ω t·ª± ph√¢n c√°ch (d·∫•u ph·∫©y, ch·∫•m ph·∫©y, kho·∫£ng tr·∫Øng, ...). ·ª®ng d·ª•ng ch·ªâ l·∫•y m√£ ƒë·∫ßu ti√™n.")

all_codes = set(df['M√£ kh√°ch h√†ng'])

def get_parent_id(x):
    if pd.isnull(x) or x is None:
        return None
    x = str(x).strip()
    return x if x in all_codes else None
df['parent_id'] = df['Ghi ch√∫'].apply(get_parent_id)

# C·∫£nh b√°o n·∫øu 'Ghi ch√∫' tham chi·∫øu m√£ KH kh√¥ng t·ªìn t·∫°i
invalid_parents = df[(df['Ghi ch√∫'].notnull()) & (~df['Ghi ch√∫'].isin(all_codes))]
if len(invalid_parents) > 0:
    st.warning(f"‚ö†Ô∏è C√≥ {len(invalid_parents)} d√≤ng c√≥ 'Ghi ch√∫' kh√¥ng kh·ªõp m√£ kh√°ch h√†ng n√†o. C√°c d√≤ng n√†y s·∫Ω kh√¥ng ƒë∆∞·ª£c t√≠nh ph√¢n c·∫•p.")

# X√¢y parent_map (cha: [con])
parent_map = {}
for idx, row in df.iterrows():
    pid = row['parent_id']
    code = row['M√£ kh√°ch h√†ng']
    if pd.notnull(pid) and pid is not None:
        parent_map.setdefault(pid, []).append(code)

# C·∫£nh b√°o v√≤ng l·∫∑p cha‚Äìcon
def detect_cycles(parent_map):
    cycles = []
    def visit(node, visited):
        if node in visited:
            return True
        visited.add(node)
        for child in parent_map.get(node, []):
            if visit(child, visited):
                cycles.append((node, child))
        visited.remove(node)
        return False
    for k in parent_map.keys():
        visit(k, set())
    return set(cycles)
cycles = detect_cycles(parent_map)
if cycles:
    st.warning(f"‚ö†Ô∏è Ph√°t hi·ªán v√≤ng l·∫∑p cha‚Äìcon trong d·ªØ li·ªáu! M·ªôt s·ªë nh√°nh b·ªã l·∫∑p (v√≠ d·ª•: {list(cycles)[:3]}...). H√£y ki·ªÉm tra l·∫°i 'Ghi ch√∫' trong file.")

# ƒê·ªá quy l·∫•y t·∫•t c·∫£ thu·ªôc c·∫•p v·ªõi visited ch·ªëng v√≤ng l·∫∑p
def get_all_descendants(code, parent_map, visited=None):
    if visited is None:
        visited = set()
    result = []
    children = parent_map.get(code, [])
    for child in children:
        if child not in visited:
            visited.add(child)
            result.append(child)
            result.extend(get_all_descendants(child, parent_map, visited))
    return result

desc_counts = []
ds_he_thong = []
for idx, row in df.iterrows():
    code = row['M√£ kh√°ch h√†ng']
    descendants = get_all_descendants(code, parent_map, visited=set([code]))
    desc_counts.append(len(descendants))
    doanhso = df[df['M√£ kh√°ch h√†ng'].isin(descendants)]['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'].sum() if descendants else 0
    ds_he_thong.append(doanhso)
df['S·ªë c·∫•p d∆∞·ªõi'] = desc_counts
df['Doanh s·ªë h·ªá th·ªëng'] = ds_he_thong

# T√≠nh override_comm
network = {
    'Catalyst':     {'comm_rate': 0.35, 'override_rate': 0.00},
    'Visionary':    {'comm_rate': 0.40, 'override_rate': 0.05},
    'Trailblazer':  {'comm_rate': 0.40, 'override_rate': 0.05},
}
df['comm_rate']     = df['Nh√≥m kh√°ch h√†ng'].map(lambda r: network.get(r, {}).get('comm_rate', 0))
df['override_rate'] = df['Nh√≥m kh√°ch h√†ng'].map(lambda r: network.get(r, {}).get('override_rate', 0))
df['override_comm'] = df['Doanh s·ªë h·ªá th·ªëng'] * df['override_rate']

if filter_nganh:
    df = df[df['Nh√≥m kh√°ch h√†ng'].isin(filter_nganh)]

# C·∫£nh b√°o nhi·ªÅu d√≤ng ho·∫∑c nh√≥m (·∫£nh h∆∞·ªüng chart)
if len(df) > 1000:
    st.warning("‚ö†Ô∏è D·ªØ li·ªáu qu√° nhi·ªÅu kh√°ch h√†ng. M·ªôt s·ªë bi·ªÉu ƒë·ªì c√≥ th·ªÉ hi·ªÉn th·ªã ch·∫≠m ho·∫∑c x·∫•u. N√™n l·ªçc nh√≥m kh√°ch h√†ng ƒë·ªÉ xem chi ti·∫øt h∆°n.")

st.markdown("### 2. B·∫£ng d·ªØ li·ªáu ƒë·∫°i l√Ω ƒë√£ x·ª≠ l√Ω")
st.dataframe(df, use_container_width=True, hide_index=True)

st.markdown("### 3. Bi·ªÉu ƒë·ªì ph√¢n t√≠ch d·ªØ li·ªáu")
if chart_type == "Bi·ªÉu ƒë·ªì c·ªôt ch·ªìng":
    fig, ax = plt.subplots(figsize=(12,5))
    ind = np.arange(len(df))
    ax.bar(ind, df['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'], width=0.5, label='T·ªïng b√°n c√° nh√¢n')
    ax.bar(ind, df['override_comm'], width=0.5, bottom=df['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'], label='Hoa h·ªìng h·ªá th·ªëng')
    ax.set_ylabel('S·ªë ti·ªÅn (VND)')
    ax.set_title('T·ªïng b√°n & Hoa h·ªìng h·ªá th·ªëng t·ª´ng c√° nh√¢n')
    ax.set_xticks(ind)
    ax.set_xticklabels(df['T√™n kh√°ch h√†ng'], rotation=60, ha='right')
    ax.legend()
    st.pyplot(fig)
elif chart_type == "S∆° ƒë·ªì Sunburst":
    try:
        fig2 = px.sunburst(
            df,
            path=['Nh√≥m kh√°ch h√†ng', 'T√™n kh√°ch h√†ng'],
            values='T·ªïng b√°n tr·ª´ tr·∫£ h√†ng',
            title="S∆° ƒë·ªì h·ªá th·ªëng c·∫•p b·∫≠c & doanh s·ªë"
        )
        st.plotly_chart(fig2, use_container_width=True)
    except Exception as e:
        st.error(f"L·ªói khi v·∫Ω Sunburst chart: {e}")
elif chart_type == "Bi·ªÉu ƒë·ªì Pareto":
    try:
        df_sorted = df.sort_values('T·ªïng b√°n tr·ª´ tr·∫£ h√†ng', ascending=False)
        cum_sum = df_sorted['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'].cumsum()
        cum_perc = 100 * cum_sum / df_sorted['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'].sum()
        fig3, ax1 = plt.subplots(figsize=(10,5))
        ax1.bar(np.arange(len(df_sorted)), df_sorted['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'], label="Doanh s·ªë")
        ax1.set_ylabel('Doanh s·ªë')
        ax1.set_xticks(range(len(df_sorted)))
        ax1.set_xticklabels(df_sorted['T√™n kh√°ch h√†ng'], rotation=60, ha='right')
        ax2 = ax1.twinx()
        ax2.plot(np.arange(len(df_sorted)), cum_perc, color='red', marker='o', label='T√≠ch l≈©y (%)')
        ax2.set_ylabel('T·ª∑ l·ªá t√≠ch l≈©y (%)')
        ax1.set_title('Bi·ªÉu ƒë·ªì Pareto: Doanh s·ªë & t·ª∑ tr·ªçng t√≠ch l≈©y')
        fig3.tight_layout()
        st.pyplot(fig3)
    except Exception as e:
        st.error(f"L·ªói khi v·∫Ω Pareto chart: {e}")
elif chart_type == "Bi·ªÉu ƒë·ªì tr√≤n (Pie)":
    try:
        fig4, ax4 = plt.subplots(figsize=(6,6))
        s = df.groupby('Nh√≥m kh√°ch h√†ng')['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'].sum()
        ax4.pie(s, labels=s.index, autopct='%1.1f%%')
        ax4.set_title('T·ª∑ tr·ªçng doanh s·ªë theo nh√≥m kh√°ch h√†ng')
        st.pyplot(fig4)
    except Exception as e:
        st.error(f"L·ªói khi v·∫Ω Pie chart: {e}")

st.markdown("### 4. T·∫£i file k·∫øt qu·∫£ ƒë·ªãnh d·∫°ng m√†u nh√≥m F1")

output_file = f'sales_report_dep_{uuid.uuid4().hex[:6]}.xlsx'
df_export = df.sort_values(by=['parent_id', 'M√£ kh√°ch h√†ng'], ascending=[True, True], na_position='last')
df_export.to_excel(output_file, index=False)

# T√¥ m√†u pastel, ch·ªâ cha (c√≥ c·∫•p d∆∞·ªõi tr·ª±c ti·∫øp) v√† F1 c√πng m√†u
wb = load_workbook(output_file)
ws = wb.active
col_makh = [cell.value for cell in ws[1]].index('M√£ kh√°ch h√†ng')+1
col_parent = [cell.value for cell in ws[1]].index('parent_id')+1
ma_cha_list = df_export[df_export['M√£ kh√°ch h√†ng'].isin(df_export['parent_id'].dropna())]['M√£ kh√°ch h√†ng'].unique().tolist()

if len(ma_cha_list) > 50:
    st.warning(f"‚ö†Ô∏è C√≥ qu√° nhi·ªÅu nh√≥m ƒë·∫°i l√Ω cha (>{len(ma_cha_list)})! M√†u s·∫Øc trong file Excel c√≥ th·ªÉ tr√πng l·∫∑p v√† kh√≥ ph√¢n bi·ªát.")

def pastel_color(seed_val):
    random.seed(str(seed_val))
    h = random.random()
    s = 0.28 + random.random()*0.09
    v = 0.97
    r, g, b = colorsys.hsv_to_rgb(h, s, v)
    return "%02X%02X%02X" % (int(r*255), int(g*255), int(b*255))
ma_cha_to_color = {ma_cha: PatternFill(start_color=pastel_color(ma_cha), end_color=pastel_color(ma_cha), fill_type='solid') for ma_cha in ma_cha_list}
for row in range(2, ws.max_row + 1):
    ma_kh = str(ws.cell(row=row, column=col_makh).value)
    parent_id = ws.cell(row=row, column=col_parent).value
    if ma_kh in ma_cha_to_color:
        fill = ma_cha_to_color[ma_kh]
    elif parent_id in ma_cha_to_color:
        fill = ma_cha_to_color[parent_id]
    else:
        fill = PatternFill(fill_type=None)
    for col in range(1, ws.max_column + 1):
        ws.cell(row=row, column=col).fill = fill
header_fill = PatternFill(start_color='FFE699', end_color='FFE699', fill_type='solid')
header_font = Font(bold=True, color='000000')
header_align = Alignment(horizontal='center', vertical='center')
for col in range(1, ws.max_column + 1):
    cell = ws.cell(row=1, column=col)
    cell.fill = header_fill
    cell.font = header_font
    cell.alignment = header_align

bio = BytesIO()
try:
    wb.save(bio)
except PermissionError:
    st.error("L·ªói: File Excel ƒëang m·ªü ·ªü ch∆∞∆°ng tr√¨nh kh√°c. ƒê√≥ng file l·∫°i tr∆∞·ªõc khi export!")

downloaded = st.download
