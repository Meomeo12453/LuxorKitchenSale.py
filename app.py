import streamlit as st
from PIL import Image
import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
import colorsys
from io import BytesIO
from openpyxl import load_workbook
from openpyxl.styles import PatternFill, Alignment, Font

# ===== C·∫•u h√¨nh giao di·ªán =====
st.set_page_config(page_title="Sales Dashboard MiniApp", layout="wide")
st.markdown("""
    <style>
    .block-container {padding-top:1.2rem;}
    .stApp {background: #F7F8FA;}
    img { border-radius: 0 !important; }
    </style>
    """, unsafe_allow_html=True)

# ==== Hi·ªÉn th·ªã logo cƒÉn gi·ªØa ====
LOGO_PATHS = [
    "logo-daba.png",
    "ef5ac011-857d-4b32-bd70-ef9ac3817106.png",
    "30313609-d84b-45c1-958e-7d50bf11b60c.png",
    "002f43d6-a413-41d0-b88a-cde6a1a1a98c.png"
]
logo = None
for path in LOGO_PATHS:
    if os.path.exists(path):
        logo = Image.open(path)
        break

if logo is not None:
    desired_height = 36  # pixel
    w, h = logo.size
    new_width = int((w / h) * desired_height)
    logo_resized = logo.resize((new_width, desired_height))
    st.markdown("<div style='display:flex;justify-content:center;margin-bottom:12px;'>", unsafe_allow_html=True)
    st.image(logo_resized)
    st.markdown("</div>", unsafe_allow_html=True)
else:
    st.warning("Kh√¥ng t√¨m th·∫•y file logo. ƒê·∫£m b·∫£o file logo ƒë√£ upload ƒë√∫ng th∆∞ m·ª•c app!")

# ===== HOTLINE & ƒê·ªäA CH·ªà =====
st.markdown(
    "<div style='text-align:center;font-size:16px;color:#1570af;font-weight:600;'>Hotline: 0909.625.808</div>",
    unsafe_allow_html=True)
st.markdown(
    "<div style='text-align:center;font-size:14px;color:#555;'>ƒê·ªãa ch·ªâ: L·∫ßu 9, Pearl Plaza, 561A ƒêi·ªán Bi√™n Ph·ªß, P.25, Q. B√¨nh Th·∫°nh, TP.HCM</div>",
    unsafe_allow_html=True)
st.markdown("<br>", unsafe_allow_html=True)

# ===== TI√äU ƒê·ªÄ =====
st.title("Sales Dashboard MiniApp")
st.markdown(
    "<small style='color:gray;'>Dashboard ph√¢n t√≠ch & qu·∫£n tr·ªã ƒë·∫°i l√Ω cho DABA S√†i G√≤n. T·∫£i file Excel, l·ªçc ‚Äì tra c·ª©u ‚Äì tr·ª±c quan ‚Äì t·∫£i b√°o c√°o m√†u nh√≥m.</small>",
    unsafe_allow_html=True)

# ======= C√ÅC CONTROL PH√ÇN T√çCH TR√äN MAIN PAGE =======
st.markdown("## üîé T√πy ch·ªçn ph√¢n t√≠ch")
col1, col2 = st.columns(2)
with col1:
    chart_type = st.radio("Ch·ªçn bi·ªÉu ƒë·ªì:", ["C·ªôt ch·ªìng", "Sunburst", "Pareto", "Pie"], horizontal=True)
with col2:
    filter_nganh = st.multiselect("L·ªçc theo nh√≥m kh√°ch h√†ng:", ["Catalyst", "Visionary", "Trailblazer"], default=[])

st.markdown("### 1. T·∫£i l√™n file Excel (.xlsx)")
uploaded_file = st.file_uploader("", type="xlsx", help="Ch·ªâ nh·∫≠n Excel, <200MB.")
if not uploaded_file:
    st.info("üí° H√£y upload file Excel m·∫´u ƒë·ªÉ b·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng Dashboard.")
    with st.expander("üìã Xem h∆∞·ªõng d·∫´n & file m·∫´u", expanded=False):
        st.markdown(
            "- Nh·∫•n **Browse files** ho·∫∑c k√©o th·∫£ file.\n"
            "- File c·∫ßn c√°c c·ªôt: **M√£ kh√°ch h√†ng, T√™n kh√°ch h√†ng, Nh√≥m kh√°ch h√†ng, T·ªïng b√°n tr·ª´ tr·∫£ h√†ng, Ghi ch√∫**.\n"
            "- N·∫øu l·ªói, ki·ªÉm tra l·∫°i ti√™u ƒë·ªÅ c·ªôt trong file Excel."
        )
    st.stop()

# ===== X·ª¨ L√ù D·ªÆ LI·ªÜU =====
df = pd.read_excel(uploaded_file)
df['M√£ kh√°ch h√†ng'] = df['M√£ kh√°ch h√†ng'].astype(str)

# ---- X√°c ƒë·ªãnh parent-child logic m·ªõi (c·∫•p tr√™n d·ª±a v√†o Ghi ch√∫) ----
parent_ids = []
prev_ma_khach_hang = set()
for idx, row in df.iterrows():
    parent_id = None
    if pd.notnull(row['Ghi ch√∫']) and row['Ghi ch√∫'] in prev_ma_khach_hang:
        parent_id = row['Ghi ch√∫']
    parent_ids.append(parent_id)
    prev_ma_khach_hang.add(row['M√£ kh√°ch h√†ng'])
df['parent_id'] = parent_ids

# ---- S·ªë thu·ªôc c·∫•p tr·ª±c ti·∫øp (F1) ----
f1_counts = []
for ma_kh in df['M√£ kh√°ch h√†ng']:
    f1_count = (df['parent_id'] == ma_kh).sum()
    f1_counts.append(f1_count)
df['S·ªë thu·ªôc c·∫•p F1'] = f1_counts

# ---- T·ªïng doanh s·ªë F1 (t·ªïng doanh s·ªë c·ªßa c√°c c·∫•p d∆∞·ªõi tr·ª±c ti·∫øp) ----
ds_f1 = []
for ma_kh in df['M√£ kh√°ch h√†ng']:
    subtotal = df.loc[df['parent_id'] == ma_kh, 'T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'].sum()
    ds_f1.append(subtotal)
df['Doanh s·ªë F1'] = ds_f1

# ---- C·∫•u tr√∫c hoa h·ªìng (t√πy ch·ªânh theo t·ª´ng nh√≥m) ----
network = {
    'Catalyst':     {'comm_rate': 0.35, 'override_rate': 0.00},
    'Visionary':    {'comm_rate': 0.40, 'override_rate': 0.05},
    'Trailblazer':  {'comm_rate': 0.40, 'override_rate': 0.05},
}
df['comm_rate']     = df['Nh√≥m kh√°ch h√†ng'].map(lambda r: network.get(r, {}).get('comm_rate', 0))
df['override_rate'] = df['Nh√≥m kh√°ch h√†ng'].map(lambda r: network.get(r, {}).get('override_rate', 0))
df['override_comm'] = df['Doanh s·ªë F1'] * df['override_rate']

# ---- Filter nh√≥m ----
if filter_nganh:
    df = df[df['Nh√≥m kh√°ch h√†ng'].isin(filter_nganh)]

# ===== B·∫¢NG D·ªÆ LI·ªÜU & GI·∫¢I TH√çCH =====
with st.expander("üìã Gi·∫£i th√≠ch c√°c tr∆∞·ªùng d·ªØ li·ªáu", expanded=False):
    st.markdown("""
    **C√°c tr∆∞·ªùng d·ªØ li·ªáu ch√≠nh:**  
    - `parent_id`: M√£ kh√°ch h√†ng c·∫•p tr√™n tr·ª±c ti·∫øp (n·∫øu c√≥).
    - `S·ªë thu·ªôc c·∫•p F1`: S·ªë th√†nh vi√™n tr·ª±c ti·∫øp d∆∞·ªõi nh√°nh n√†y.
    - `Doanh s·ªë F1`: T·ªïng doanh s·ªë c·ªßa c√°c c·∫•p d∆∞·ªõi tr·ª±c ti·∫øp.
    - `override_comm`: Hoa h·ªìng t·ª´ h·ªá th·ªëng c·∫•p d∆∞·ªõi F1 (√°p d·ª•ng t·ª∑ l·ªá t·ª´ng nh√≥m).
    """)

st.subheader("2. B·∫£ng d·ªØ li·ªáu ƒë·∫°i l√Ω ƒë√£ x·ª≠ l√Ω")
st.dataframe(df, use_container_width=True, hide_index=True)

# ===== BI·ªÇU ƒê·ªí PH√ÇN T√çCH =====
st.subheader("3. Bi·ªÉu ƒë·ªì ph√¢n t√≠ch d·ªØ li·ªáu")

if chart_type == "C·ªôt ch·ªìng":
    fig, ax = plt.subplots(figsize=(12,5))
    ind = np.arange(len(df))
    ax.bar(ind, df['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'], width=0.5, label='T·ªïng b√°n c√° nh√¢n')
    ax.bar(ind, df['override_comm'], width=0.5, bottom=df['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'], label='Hoa h·ªìng h·ªá th·ªëng')
    ax.set_ylabel('S·ªë ti·ªÅn (VND)')
    ax.set_title('T·ªïng b√°n & Hoa h·ªìng h·ªá th·ªëng t·ª´ng c√° nh√¢n')
    ax.set_xticks(ind)
    ax.set_xticklabels(df['T√™n kh√°ch h√†ng'], rotation=60, ha='right')
    ax.legend()
    st.pyplot(fig)

elif chart_type == "Sunburst":
    try:
        fig2 = px.sunburst(
            df,
            path=['Nh√≥m kh√°ch h√†ng', 'T√™n kh√°ch h√†ng'],
            values='T·ªïng b√°n tr·ª´ tr·∫£ h√†ng',
            title="S∆° ƒë·ªì h·ªá th·ªëng c·∫•p b·∫≠c & doanh s·ªë"
        )
        st.plotly_chart(fig2, use_container_width=True)
    except Exception as e:
        st.error(f"L·ªói khi v·∫Ω Sunburst chart: {e}")

elif chart_type == "Pareto":
    try:
        df_sorted = df.sort_values('T·ªïng b√°n tr·ª´ tr·∫£ h√†ng', ascending=False)
        cum_sum = df_sorted['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'].cumsum()
        cum_perc = 100 * cum_sum / df_sorted['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'].sum()
        fig3, ax1 = plt.subplots(figsize=(10,5))
        ax1.bar(np.arange(len(df_sorted)), df_sorted['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'], label="Doanh s·ªë")
        ax1.set_ylabel('Doanh s·ªë')
        ax1.set_xticks(range(len(df_sorted)))
        ax1.set_xticklabels(df_sorted['T√™n kh√°ch h√†ng'], rotation=60, ha='right')
        ax2 = ax1.twinx()
        ax2.plot(np.arange(len(df_sorted)), cum_perc, color='red', marker='o', label='T√≠ch l≈©y (%)')
        ax2.set_ylabel('T·ª∑ l·ªá t√≠ch l≈©y (%)')
        ax1.set_title('Bi·ªÉu ƒë·ªì Pareto: Doanh s·ªë & t·ª∑ tr·ªçng t√≠ch l≈©y')
        fig3.tight_layout()
        st.pyplot(fig3)
    except Exception as e:
        st.error(f"L·ªói khi v·∫Ω Pareto chart: {e}")

elif chart_type == "Pie":
    try:
        fig4, ax4 = plt.subplots(figsize=(6,6))
        s = df.groupby('Nh√≥m kh√°ch h√†ng')['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'].sum()
        ax4.pie(s, labels=s.index, autopct='%1.1f%%')
        ax4.set_title('T·ª∑ tr·ªçng doanh s·ªë theo nh√≥m kh√°ch h√†ng')
        st.pyplot(fig4)
    except Exception as e:
        st.error(f"L·ªói khi v·∫Ω Pie chart: {e}")

# ===== XU·∫§T FILE ƒê·∫∏P, T·∫¢I V·ªÄ =====
st.subheader("4. T·∫£i file k·∫øt qu·∫£ ƒë·ªãnh d·∫°ng m√†u nh√≥m")

output_file = 'sales_report_dep.xlsx'
df.to_excel(output_file, index=False)

wb = load_workbook(output_file)
ws = wb.active

header_fill = PatternFill(start_color='FFE699', end_color='FFE699', fill_type='solid')
header_font = Font(bold=True, color='000000')
header_align = Alignment(horizontal='center', vertical='center')
for col in range(1, ws.max_column + 1):
    cell = ws.cell(row=1, column=col)
    cell.fill = header_fill
    cell.font = header_font
    cell.alignment = header_align

money_keywords = ['b√°n', 'doanh s·ªë', 'ti·ªÅn', 'hoa h·ªìng', 'comm', 'VND']
cols_money = [col[0].column for col in ws.iter_cols(1, ws.max_column)
              if any(key in (col[0].value or '').lower() for key in money_keywords)]

col_makh = [cell.value for cell in ws[1]].index('M√£ kh√°ch h√†ng')+1
col_role = [cell.value for cell in ws[1]].index('Nh√≥m kh√°ch h√†ng')+1

all_codes = [str(ws.cell(row=i, column=col_makh).value) for i in range(2, ws.max_row+1)]
prefix_groups = {}
for length in range(len(max(all_codes, key=len)), 0, -1):
    prefix_count = {}
    for code in all_codes:
        if len(code) < length:
            continue
        prefix = code[:length]
        prefix_count.setdefault(prefix, []).append(code)
    for prefix, codes in prefix_count.items():
        if len(codes) > 1:
            prefix_groups[prefix] = codes

row_to_prefix = {}
for idx, code in enumerate(all_codes):
    best_prefix = ''
    best_len = 0
    for prefix in prefix_groups.keys():
        if code.startswith(prefix) and len(prefix) > best_len:
            best_prefix = prefix
            best_len = len(prefix)
    row_to_prefix[idx+2] = best_prefix if best_prefix else code

prefix_set = set(row_to_prefix.values())
prefix_list = sorted(prefix_set)
def get_contrasting_color(idx, total):
    h = idx / total
    r, g, b = colorsys.hsv_to_rgb(h, 0.65, 1)
    return "%02X%02X%02X" % (int(r*255), int(g*255), int(b*255))
prefix_to_color = {prefix: PatternFill(start_color=get_contrasting_color(i, len(prefix_list)),
                                       end_color=get_contrasting_color(i, len(prefix_list)),
                                       fill_type='solid')
                   for i, prefix in enumerate(prefix_list)}

for row in range(2, ws.max_row + 1):
    role = ws.cell(row=row, column=col_role).value
    if role == 'Trailblazer':
        fill = PatternFill(start_color='FFFFFF', end_color='FFFFFF', fill_type='solid')
    else:
        fill = prefix_to_color[row_to_prefix[row]]
    for col in range(1, ws.max_column + 1):
        ws.cell(row=row, column=col).fill = fill

for col in range(1, ws.max_column + 1):
    for row in range(2, ws.max_row+1):
        cell = ws.cell(row=row, column=col)
        if col in cols_money:
            if isinstance(cell.value, (int, float)):
                cell.number_format = '#,##0'
            cell.alignment = Alignment(horizontal='right', vertical='center')
        else:
            cell.alignment = Alignment(horizontal='center', vertical='center')

for col in ws.columns:
    max_length = 0
    column = col[0].column_letter
    for cell in col:
        val = str(cell.value) if cell.value else ""
        max_length = max(max_length, len(val.encode('utf8'))//2+2)
    ws.column_dimensions[column].width = max(10, min(40, max_length))

bio = BytesIO()
wb.save(bio)
st.download_button(
    label="üì• T·∫£i file Excel ƒë√£ ƒë·ªãnh d·∫°ng",
    data=bio.getvalue(),
    file_name=output_file,
    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
)

# ===== Footer =====
st.markdown("<hr>", unsafe_allow_html=True)
st.markdown(
    "<div style='text-align:center;font-size:16px;color:#1570af;font-weight:600;'>Hotline: 0909.625.808</div>",
    unsafe_allow_html=True)
st.markdown(
    "<div style='text-align:center;font-size:14px;color:#555;'>ƒê·ªãa ch·ªâ: L·∫ßu 9, Pearl Plaza, 561A ƒêi·ªán Bi√™n Ph·ªß, P.25, Q. B√¨nh Th·∫°nh, TP.HCM</div>",
    unsafe_allow_html=True)
