import streamlit as st
from PIL import Image
import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
import colorsys
from io import BytesIO
from openpyxl import load_workbook
from openpyxl.styles import PatternFill, Alignment, Font
import random
import base64

# ========== CSS CHU·∫®N H√ìA GIAO DI·ªÜN & √âP M√ÄU CH·ªÆ ==============
st.markdown("""
    <style>
    .block-container {padding-top:0.7rem; max-width:100vw !important;}
    .stApp {background: #F7F8FA;}
    img { border-radius: 0 !important; }
    h1, h2, h3 { font-size: 1.18rem !important; font-weight:600; }
    /* Lu√¥n √©p m√†u ch·ªØ control v·ªÅ m√†u ƒëen */
    .stRadio > div > label, .stCheckbox > div > label, .stSelectbox > div, .stMultiSelect > div, .stSlider > div, .stTextInput > div label,
    .stTextInput label, .stTextArea label, .stNumberInput label, .stDateInput label {
        color: #222 !important;
        font-weight: 600 !important;
    }
    .css-16idsys, .css-1c7y2kd, .css-1y4p8pa, .css-10trblm, .css-x78sv8, .css-q8sbsg {
        color: #222 !important;
    }
    .stRadio > div, .stSelectbox > div, .stMultiSelect > div {
        background: #fff !important;
    }
    </style>
""", unsafe_allow_html=True)

# ====== LOGO cƒÉn gi·ªØa (t·ªëi ∆∞u ƒëa thi·∫øt b·ªã) =======
LOGO_PATHS = [
    "logo-daba.png",
    "ef5ac011-857d-4b32-bd70-ef9ac3817106.png",
    "30313609-d84b-45c1-958e-7d50bf11b60c.png",
    "002f43d6-a413-41d0-b88a-cde6a1a1a98c.png"
]
logo = None
for path in LOGO_PATHS:
    if os.path.exists(path):
        logo = Image.open(path)
        break

if logo is not None:
    desired_height = 36
    w, h = logo.size
    new_width = int((w / h) * desired_height)
    logo_resized = logo.resize((new_width, desired_height))
    buffered = BytesIO()
    logo_resized.save(buffered, format="PNG")
    img_str = base64.b64encode(buffered.getvalue()).decode()
    st.markdown(
        f"""
        <div style="display:flex;flex-direction:column;align-items:center;justify-content:center;width:100%;padding-top:4px;padding-bottom:0;">
            <img src="data:image/png;base64,{img_str}" 
                 width="{new_width}" height="{desired_height}" style="display:block;margin:auto;" />
            <div style="height:5px;"></div>
        </div>
        """,
        unsafe_allow_html=True
    )
else:
    st.warning("Kh√¥ng t√¨m th·∫•y file logo. ƒê·∫£m b·∫£o file logo ƒë√£ upload ƒë√∫ng th∆∞ m·ª•c app!")

st.markdown(
    "<div style='text-align:center;font-size:16px;color:#1570af;font-weight:600;'>Hotline: 0909.625.808</div>",
    unsafe_allow_html=True)
st.markdown(
    "<div style='text-align:center;font-size:14px;color:#555;'>ƒê·ªãa ch·ªâ: L·∫ßu 9, Pearl Plaza, 561A ƒêi·ªán Bi√™n Ph·ªß, P.25, Q. B√¨nh Th·∫°nh, TP.HCM</div>",
    unsafe_allow_html=True)
st.markdown("<hr style='margin:10px 0 20px 0;border:1px solid #EEE;'>", unsafe_allow_html=True)

# =========== CONTROL ===========
st.markdown("### üîé T√πy ch·ªçn ph√¢n t√≠ch")
col1, col2 = st.columns([2, 1])
with col1:
    chart_type = st.radio(
        "Ch·ªçn lo·∫°i bi·ªÉu ƒë·ªì:",
        ["Bi·ªÉu ƒë·ªì c·ªôt ch·ªìng", "S∆° ƒë·ªì Sunburst", "Bi·ªÉu ƒë·ªì Pareto", "Bi·ªÉu ƒë·ªì tr√≤n (Pie)"],
        horizontal=True
    )
with col2:
    filter_nganh = st.multiselect("L·ªçc theo nh√≥m kh√°ch h√†ng:", ["Catalyst", "Visionary", "Trailblazer"], default=[])

st.markdown("<hr style='margin:10px 0 20px 0;border:1px solid #EEE;'>", unsafe_allow_html=True)

# ========== UPLOAD FILES ===========
st.markdown("### 1. T·∫£i l√™n t·ªëi ƒëa 10 file Excel (.xlsx)")
uploaded_files = st.file_uploader("**K√©o th·∫£ ho·∫∑c ch·ªçn t·ªëi ƒëa 10 file Excel**", type="xlsx", accept_multiple_files=True, help="Ch·ªâ nh·∫≠n Excel, <200MB.")
if not uploaded_files:
    st.info("üí° H√£y upload 1 ho·∫∑c nhi·ªÅu file Excel m·∫´u ƒë·ªÉ b·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng Dashboard.")
    with st.expander("üìã Xem h∆∞·ªõng d·∫´n & file m·∫´u", expanded=False):
        st.markdown(
            "- Nh·∫•n **Browse files** ho·∫∑c k√©o th·∫£ file.\n"
            "- File c·∫ßn c√°c c·ªôt: **M√£ kh√°ch h√†ng, T√™n kh√°ch h√†ng, Nh√≥m kh√°ch h√†ng, T·ªïng b√°n tr·ª´ tr·∫£ h√†ng, Ghi ch√∫**.\n"
            "- N·∫øu l·ªói, ki·ªÉm tra l·∫°i ti√™u ƒë·ªÅ c·ªôt trong file Excel."
        )
    st.stop()

st.markdown("<hr style='margin:10px 0 20px 0;border:1px solid #EEE;'>", unsafe_allow_html=True)

# ========== X·ª¨ L√ù D·ªÆ LI·ªÜU T·ªîNG H·ª¢P ===========
all_df = []
for file in uploaded_files:
    temp = pd.read_excel(file)
    temp['T√™n file'] = file.name
    all_df.append(temp)
df = pd.concat(all_df, ignore_index=True)

# Chu·∫©n h√≥a m√£ kh√°ch h√†ng, ghi ch√∫ v·ªÅ chu·ªói, b·ªè kho·∫£ng tr·∫Øng, NaN
df['M√£ kh√°ch h√†ng'] = df['M√£ kh√°ch h√†ng'].astype(str).str.strip()
df['Ghi ch√∫'] = df['Ghi ch√∫'].astype(str).str.strip()
df['Ghi ch√∫'] = df['Ghi ch√∫'].replace({'None': None, 'nan': None, 'NaN': None, '': None})

# X·ª≠ l√Ω c·ªôt T·ªïng b√°n tr·ª´ tr·∫£ h√†ng sang s·ªë
df['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'] = pd.to_numeric(df['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'], errors='coerce').fillna(0)

# T·∫°o set/list t·∫•t c·∫£ m√£ kh√°ch h√†ng
all_codes = set(df['M√£ kh√°ch h√†ng'])

# parent_id ch·ªâ l√† m√£ kh√°ch h√†ng kh√°c v√† h·ª£p l·ªá
def get_parent_id(x):
    if pd.isnull(x) or x is None:
        return None
    x = str(x).strip()
    if x in all_codes:
        return x
    return None
df['parent_id'] = df['Ghi ch√∫'].apply(get_parent_id)

# X√¢y parent_map cho ƒëa file
parent_map = {}
for idx, row in df.iterrows():
    pid = row['parent_id']
    code = row['M√£ kh√°ch h√†ng']
    if pd.notnull(pid) and pid is not None:
        parent_map.setdefault(str(pid), []).append(str(code))

def get_all_descendants(code, parent_map):
    result = []
    direct = parent_map.get(str(code), [])
    result.extend(direct)
    for child in direct:
        result.extend(get_all_descendants(child, parent_map))
    return result

desc_counts = []
ds_he_thong = []
for idx, row in df.iterrows():
    code = str(row['M√£ kh√°ch h√†ng'])
    descendants = get_all_descendants(code, parent_map)
    desc_counts.append(len(descendants))
    if descendants:
        doanhso = df[df['M√£ kh√°ch h√†ng'].isin(descendants)]['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'].sum()
    else:
        doanhso = 0
    ds_he_thong.append(doanhso)
df['S·ªë c·∫•p d∆∞·ªõi'] = desc_counts
df['Doanh s·ªë h·ªá th·ªëng'] = ds_he_thong

network = {
    'Catalyst':     {'comm_rate': 0.35, 'override_rate': 0.00},
    'Visionary':    {'comm_rate': 0.40, 'override_rate': 0.05},
    'Trailblazer':  {'comm_rate': 0.40, 'override_rate': 0.05},
}
df['comm_rate']     = df['Nh√≥m kh√°ch h√†ng'].map(lambda r: network.get(r, {}).get('comm_rate', 0))
df['override_rate'] = df['Nh√≥m kh√°ch h√†ng'].map(lambda r: network.get(r, {}).get('override_rate', 0))
df['override_comm'] = df['Doanh s·ªë h·ªá th·ªëng'] * df['override_rate']

if filter_nganh:
    df = df[df['Nh√≥m kh√°ch h√†ng'].isin(filter_nganh)]

with st.expander("üìã Gi·∫£i th√≠ch c√°c tr∆∞·ªùng d·ªØ li·ªáu", expanded=False):
    st.markdown("""
    **C√°c tr∆∞·ªùng d·ªØ li·ªáu ch√≠nh:**  
    - `parent_id`: M√£ kh√°ch h√†ng c·∫•p tr√™n tr·ª±c ti·∫øp (n·∫øu c√≥).
    - `S·ªë c·∫•p d∆∞·ªõi`: T·ªïng s·ªë th√†nh vi√™n h·ªá th·ªëng d∆∞·ªõi nh√°nh n√†y (ƒëa t·∫ßng).
    - `Doanh s·ªë h·ªá th·ªëng`: T·ªïng doanh s·ªë c·ªßa t·∫•t c·∫£ c·∫•p d∆∞·ªõi (ƒëa t·∫ßng).
    - `override_comm`: Hoa h·ªìng t·ª´ h·ªá th·ªëng c·∫•p d∆∞·ªõi (√°p d·ª•ng t·ª∑ l·ªá t·ª´ng nh√≥m).
    """)

st.markdown("<hr style='margin:10px 0 20px 0;border:1px solid #EEE;'>", unsafe_allow_html=True)

st.markdown("### 2. B·∫£ng d·ªØ li·ªáu ƒë·∫°i l√Ω ƒë√£ x·ª≠ l√Ω")
st.dataframe(df, use_container_width=True, hide_index=True)

st.markdown("<hr style='margin:10px 0 20px 0;border:1px solid #EEE;'>", unsafe_allow_html=True)

st.markdown("### 3. Bi·ªÉu ƒë·ªì ph√¢n t√≠ch d·ªØ li·ªáu")

if chart_type == "Bi·ªÉu ƒë·ªì c·ªôt ch·ªìng":
    fig, ax = plt.subplots(figsize=(12,5))
    ind = np.arange(len(df))
    ax.bar(ind, df['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'], width=0.5, label='T·ªïng b√°n c√° nh√¢n')
    ax.bar(ind, df['override_comm'], width=0.5, bottom=df['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'], label='Hoa h·ªìng h·ªá th·ªëng')
    ax.set_ylabel('S·ªë ti·ªÅn (VND)')
    ax.set_title('T·ªïng b√°n & Hoa h·ªìng h·ªá th·ªëng t·ª´ng c√° nh√¢n')
    ax.set_xticks(ind)
    ax.set_xticklabels(df['T√™n kh√°ch h√†ng'], rotation=60, ha='right')
    ax.legend()
    st.pyplot(fig)

elif chart_type == "S∆° ƒë·ªì Sunburst":
    try:
        fig2 = px.sunburst(
            df,
            path=['Nh√≥m kh√°ch h√†ng', 'T√™n kh√°ch h√†ng'],
            values='T·ªïng b√°n tr·ª´ tr·∫£ h√†ng',
            title="S∆° ƒë·ªì h·ªá th·ªëng c·∫•p b·∫≠c & doanh s·ªë"
        )
        st.plotly_chart(fig2, use_container_width=True)
    except Exception as e:
        st.error(f"L·ªói khi v·∫Ω Sunburst chart: {e}")

elif chart_type == "Bi·ªÉu ƒë·ªì Pareto":
    try:
        df_sorted = df.sort_values('T·ªïng b√°n tr·ª´ tr·∫£ h√†ng', ascending=False)
        cum_sum = df_sorted['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'].cumsum()
        cum_perc = 100 * cum_sum / df_sorted['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'].sum()
        fig3, ax1 = plt.subplots(figsize=(10,5))
        ax1.bar(np.arange(len(df_sorted)), df_sorted['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'], label="Doanh s·ªë")
        ax1.set_ylabel('Doanh s·ªë')
        ax1.set_xticks(range(len(df_sorted)))
        ax1.set_xticklabels(df_sorted['T√™n kh√°ch h√†ng'], rotation=60, ha='right')
        ax2 = ax1.twinx()
        ax2.plot(np.arange(len(df_sorted)), cum_perc, color='red', marker='o', label='T√≠ch l≈©y (%)')
        ax2.set_ylabel('T·ª∑ l·ªá t√≠ch l≈©y (%)')
        ax1.set_title('Bi·ªÉu ƒë·ªì Pareto: Doanh s·ªë & t·ª∑ tr·ªçng t√≠ch l≈©y')
        fig3.tight_layout()
        st.pyplot(fig3)
    except Exception as e:
        st.error(f"L·ªói khi v·∫Ω Pareto chart: {e}")

elif chart_type == "Bi·ªÉu ƒë·ªì tr√≤n (Pie)":
    try:
        fig4, ax4 = plt.subplots(figsize=(6,6))
        s = df.groupby('Nh√≥m kh√°ch h√†ng')['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'].sum()
        ax4.pie(s, labels=s.index, autopct='%1.1f%%')
        ax4.set_title('T·ª∑ tr·ªçng doanh s·ªë theo nh√≥m kh√°ch h√†ng')
        st.pyplot(fig4)
    except Exception as e:
        st.error(f"L·ªói khi v·∫Ω Pie chart: {e}")

st.markdown("<hr style='margin:10px 0 20px 0;border:1px solid #EEE;'>", unsafe_allow_html=True)

st.markdown("### 4. T·∫£i file k·∫øt qu·∫£ ƒë·ªãnh d·∫°ng m√†u nh√≥m F1")

output_file = 'sales_report_dep.xlsx'
# S·∫Øp x·∫øp ƒë·ªÉ c√°c d√≤ng c√πng "Ghi ch√∫" s·∫Ω li√™n ti·∫øp nhau
df_export = df.sort_values(
    by=['Ghi ch√∫', 'M√£ kh√°ch h√†ng'],
    ascending=[True, True],
    na_position='last'
)
df_export.to_excel(output_file, index=False)

# T√¥ m√†u pastel, ch·ªâ cha (c√≥ c·∫•p d∆∞·ªõi tr·ª±c ti·∫øp) v√† F1 c√πng m√†u; c√°c nh√≥m kh√°c m√†u kh√°c, c√≤n l·∫°i tr·∫Øng
wb = load_workbook(output_file)
ws = wb.active

col_makh = [cell.value for cell in ws[1]].index('M√£ kh√°ch h√†ng')+1
col_parent = [cell.value for cell in ws[1]].index('parent_id')+1

ma_cha_list = df_export[df_export['M√£ kh√°ch h√†ng'].isin(df_export['parent_id'].dropna())]['M√£ kh√°ch h√†ng'].unique().tolist()

def pastel_color(seed_val):
    random.seed(str(seed_val))
    h = random.random()
    s = 0.28 + random.random()*0.09
    v = 0.97
    r, g, b = colorsys.hsv_to_rgb(h, s, v)
    return "%02X%02X%02X" % (int(r*255), int(g*255), int(b*255))

ma_cha_to_color = {ma_cha: PatternFill(start_color=pastel_color(ma_cha), end_color=pastel_color(ma_cha), fill_type='solid') for ma_cha in ma_cha_list}

for row in range(2, ws.max_row + 1):
    ma_kh = str(ws.cell(row=row, column=col_makh).value)
    parent_id = ws.cell(row=row, column=col_parent).value
    if ma_kh in ma_cha_to_color:
        fill = ma_cha_to_color[ma_kh]
    elif parent_id in ma_cha_to_color:
        fill = ma_cha_to_color[parent_id]
    else:
        fill = PatternFill(fill_type=None)
    for col in range(1, ws.max_column + 1):
        ws.cell(row=row, column=col).fill = fill

header_fill = PatternFill(start_color='FFE699', end_color='FFE699', fill_type='solid')
header_font = Font(bold=True, color='000000')
header_align = Alignment(horizontal='center', vertical='center')
for col in range(1, ws.max_column + 1):
    cell = ws.cell(row=1, column=col)
    cell.fill = header_fill
    cell.font = header_font
    cell.alignment = header_align

bio = BytesIO()
wb.save(bio)
downloaded = st.download_button(
    label="üì• T·∫£i file Excel ƒë√£ ƒë·ªãnh d·∫°ng",
    data=bio.getvalue(),
    file_name=output_file,
    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
)
if downloaded:
    st.toast("‚úÖ ƒê√£ t·∫£i xu·ªëng!", icon="‚úÖ")

st.markdown("<hr style='margin:10px 0 20px 0;border:1px solid #EEE;'>", unsafe_allow_html=True)

st.markdown(
    "<div style='text-align:center;font-size:16px;color:#1570af;font-weight:600;'>Hotline: 0909.625.808</div>",
    unsafe_allow_html=True)
st.markdown(
    "<div style='text-align:center;font-size:14px;color:#555;'>ƒê·ªãa ch·ªâ: L·∫ßu 9, Pearl Plaza, 561A ƒêi·ªán Bi√™n Ph·ªß, P.25, Q. B√¨nh Th·∫°nh, TP.HCM</div>",
    unsafe_allow_html=True)
