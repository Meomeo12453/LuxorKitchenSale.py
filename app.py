import streamlit as st
from PIL import Image
import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
import colorsys
from io import BytesIO
from openpyxl import load_workbook
from openpyxl.styles import PatternFill, Alignment, Font
import random
import base64
import uuid
from matplotlib.backends.backend_pdf import PdfPages

st.set_page_config(page_title="Sales Dashboard MiniApp", layout="wide")
for _ in range(4):
    st.write("")

st.markdown("""
    <style>
    .block-container {padding-top:0.7rem; max-width:100vw !important;}
    .stApp {background: #F7F8FA;}
    img { border-radius: 0 !important; }
    h1, h2, h3 { font-size: 1.18rem !important; font-weight:600; }
    </style>
""", unsafe_allow_html=True)

LOGO_PATHS = [
    "logo-daba.png",
    "ef5ac011-857d-4b32-bd70-ef9ac3817106.png"
]
logo = None
for path in LOGO_PATHS:
    if os.path.exists(path):
        logo = Image.open(path)
        break

if logo is not None:
    desired_height = 36
    w, h = logo.size
    new_width = int((w / h) * desired_height)
    logo_resized = logo.resize((new_width, desired_height))
    buffered = BytesIO()
    logo_resized.save(buffered, format="PNG")
    img_str = base64.b64encode(buffered.getvalue()).decode()
    st.markdown(
        f"""
        <div style="display:flex;flex-direction:column;align-items:center;justify-content:center;width:100%;padding-top:4px;padding-bottom:0;">
            <img src="data:image/png;base64,{img_str}" 
                 width="{new_width}" height="{desired_height}" style="display:block;margin:auto;" />
            <div style="height:5px;"></div>
        </div>
        """,
        unsafe_allow_html=True
    )

st.markdown(
    "<div style='text-align:center;font-size:20px;color:#1570af;font-weight:600;'>B·∫¢NG T√çNH HOA H·ªíNG C√îNG TY TNHH DABA SAIGON</div>",
    unsafe_allow_html=True)
st.markdown(
    "<div style='text-align:center;font-size:14px;color:#555;'>Hotline 0909.625.808 ƒê·ªãa ch·ªâ: L·∫ßu 9, Pearl Plaza, 561A ƒêi·ªán Bi√™n Ph·ªß, P.25, Q. B√¨nh Th·∫°nh, TP.HCM</div>",
    unsafe_allow_html=True)
st.markdown("<hr style='margin:10px 0 20px 0;border:1px solid #EEE;'>", unsafe_allow_html=True)

# ========== CONTROL ==========
st.markdown("### üîé T√πy ch·ªçn ph√¢n t√≠ch")
col1, col2 = st.columns([2, 1])
with col1:
    chart_type = st.radio(
        "Ch·ªçn lo·∫°i bi·ªÉu ƒë·ªì:",
        ["Bi·ªÉu ƒë·ªì c·ªôt ch·ªìng", "S∆° ƒë·ªì Sunburst", "Bi·ªÉu ƒë·ªì Pareto", "Bi·ªÉu ƒë·ªì tr√≤n (Pie)"],
        horizontal=True
    )
with col2:
    filter_nganh = st.multiselect("L·ªçc theo nh√≥m kh√°ch h√†ng:", ["Catalyst", "Visionary", "Trailblazer"], default=[])

st.markdown("<hr style='margin:10px 0 20px 0;border:1px solid #EEE;'>", unsafe_allow_html=True)

# ======= MULTI FILE UPLOAD =======
st.markdown("### 1. T·∫£i l√™n t·ªëi ƒëa 10 file Excel (.xlsx)")
uploaded_files = st.file_uploader(
    "**Ch·ªçn nhi·ªÅu file ho·∫∑c k√©o th·∫£ nhi·ªÅu file Excel**",
    type="xlsx",
    accept_multiple_files=True,
    help="Ch·ªâ nh·∫≠n Excel, <200MB m·ªói file. C√°c file ph·∫£i c√πng c·∫•u tr√∫c c·ªôt."
)
if not uploaded_files:
    st.info("üí° H√£y upload 1 ho·∫∑c nhi·ªÅu file Excel m·∫´u ƒë·ªÉ b·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng Dashboard.")
    with st.expander("üìã Xem h∆∞·ªõng d·∫´n & file m·∫´u", expanded=False):
        st.markdown(
            "- Ch·ªçn ho·∫∑c k√©o th·∫£ **1‚Äì10 file Excel**.\n"
            "- File c·∫ßn c√°c c·ªôt: **M√£ kh√°ch h√†ng, T√™n kh√°ch h√†ng, Nh√≥m kh√°ch h√†ng, T·ªïng b√°n tr·ª´ tr·∫£ h√†ng, Ghi ch√∫**.\n"
            "- N·∫øu l·ªói, ki·ªÉm tra l·∫°i ti√™u ƒë·ªÅ c·ªôt trong file Excel."
        )
    st.stop()

# ===== G·ªòP & L√ÄM S·∫†CH D·ªÆ LI·ªÜU =====
dfs = []
for f in uploaded_files[:10]:
    dft = pd.read_excel(f)
    dfs.append(dft)
df = pd.concat(dfs, ignore_index=True)

# ===== C·∫¢NH B√ÅO TR√ôNG M√É KH√ÅCH H√ÄNG =====
duplicated_mask = df.duplicated(subset=['M√£ kh√°ch h√†ng'], keep=False)
if duplicated_mask.any():
    dup_kh = df.loc[duplicated_mask, 'M√£ kh√°ch h√†ng']
    dup_kh_list = dup_kh.value_counts().index.tolist()
    dup_kh_str = ", ".join(str(x) for x in dup_kh_list)
    st.warning(
        f"‚ö†Ô∏è C√≥ {len(dup_kh_list)} m√£ kh√°ch h√†ng b·ªã tr√πng trong file d·ªØ li·ªáu: **{dup_kh_str}**. "
        "Ch·ªâ gi·ªØ l·∫°i d√≤ng ƒë·∫ßu ti√™n cho m·ªói m√£. Vui l√≤ng ki·ªÉm tra l·∫°i file g·ªëc!"
    )

df['M√£ kh√°ch h√†ng'] = df['M√£ kh√°ch h√†ng'].astype(str).str.strip()
df['Ghi ch√∫'] = df['Ghi ch√∫'].astype(str).str.strip()
df['Ghi ch√∫'] = df['Ghi ch√∫'].replace({'None': None, 'nan': None, 'NaN': None, '': None})
df['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'] = pd.to_numeric(df['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'], errors='coerce').fillna(0)
df = df.drop_duplicates(subset=['M√£ kh√°ch h√†ng'], keep='first')

all_codes = set(df['M√£ kh√°ch h√†ng'])

def get_parent_id(x):
    if pd.isnull(x) or x is None:
        return None
    x = str(x).strip()
    return x if x in all_codes else None
df['parent_id'] = df['Ghi ch√∫'].apply(get_parent_id)

parent_map = {}
for idx, row in df.iterrows():
    pid = row['parent_id']
    code = row['M√£ kh√°ch h√†ng']
    if pd.notnull(pid) and pid is not None:
        parent_map.setdefault(pid, []).append(code)

def get_all_descendants(code, parent_map, visited=None):
    if visited is None:
        visited = set()
    result = []
    children = parent_map.get(code, [])
    for child in children:
        if child not in visited:
            visited.add(child)
            result.append(child)
            result.extend(get_all_descendants(child, parent_map, visited))
    return result

desc_counts = []
ds_he_thong = []
for idx, row in df.iterrows():
    code = row['M√£ kh√°ch h√†ng']
    descendants = get_all_descendants(code, parent_map, visited=set([code]))
    desc_counts.append(len(descendants))
    doanhso = df[df['M√£ kh√°ch h√†ng'].isin(descendants)]['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'].sum() if descendants else 0
    ds_he_thong.append(doanhso)
df['S·ªë c·∫•p d∆∞·ªõi'] = desc_counts
df['Doanh s·ªë h·ªá th·ªëng'] = ds_he_thong

network = {
    'Catalyst':     {'comm_rate': 0.35, 'override_rate': 0.00},
    'Visionary':    {'comm_rate': 0.40, 'override_rate': 0.05},
    'Trailblazer':  {'comm_rate': 0.40, 'override_rate': 0.05},
}
df['comm_rate']     = df['Nh√≥m kh√°ch h√†ng'].map(lambda r: network.get(r, {}).get('comm_rate', 0))
df['override_rate'] = df['Nh√≥m kh√°ch h√†ng'].map(lambda r: network.get(r, {}).get('override_rate', 0))

# ==== T√çNH V∆Ø·ª¢T C·∫§P & G·∫ÆN V√ÄO DATAFRAME ====
trailblazer_codes = df[df['Nh√≥m kh√°ch h√†ng'] == 'Trailblazer']['M√£ kh√°ch h√†ng'].astype(str)
catalyst_children = df[(df['Nh√≥m kh√°ch h√†ng'] == 'Catalyst') & (df['parent_id'].notnull())]
catalyst_children = catalyst_children[catalyst_children['parent_id'].isin(trailblazer_codes)]
vuot_cap_ds = catalyst_children.groupby('parent_id')['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'].sum()
vuot_cap_hh = vuot_cap_ds * 0.10
df['Doanh s·ªë v∆∞·ª£t c·∫•p'] = df['M√£ kh√°ch h√†ng'].astype(str).map(vuot_cap_ds).fillna(0)
df['Hoa h·ªìng v∆∞·ª£t c·∫•p'] = df['M√£ kh√°ch h√†ng'].astype(str).map(vuot_cap_hh).fillna(0)
catalyst_sys_map = catalyst_children.set_index('M√£ kh√°ch h√†ng')['parent_id'].to_dict()
df['vuot_cap_trailblazer'] = df['M√£ kh√°ch h√†ng'].map(catalyst_sys_map)

# === ƒêI·ªÄU CH·ªàNH DOANH S·ªê H·ªÜ TH·ªêNG CHO TRAILBLAZER ===
tb_catalyst_vuotcap_doanhso = vuot_cap_ds.to_dict()
for idx, row in df.iterrows():
    if row['Nh√≥m kh√°ch h√†ng'] == 'Trailblazer':
        minus = tb_catalyst_vuotcap_doanhso.get(row['M√£ kh√°ch h√†ng'], 0)
        df.at[idx, 'Doanh s·ªë h·ªá th·ªëng'] = max(row['Doanh s·ªë h·ªá th·ªëng'] - minus, 0)

# ==== T√çNH override_comm SAU khi c·∫≠p nh·∫≠t Doanh s·ªë h·ªá th·ªëng! ====
df['override_comm'] = df['Doanh s·ªë h·ªá th·ªëng'] * df['override_rate']

# S·∫Øp x·∫øp l·∫°i th·ª© t·ª± c·ªôt n·∫øu c·∫ßn
cols = list(df.columns)
if 'Hoa h·ªìng v∆∞·ª£t c·∫•p' in cols and 'Doanh s·ªë v∆∞·ª£t c·∫•p' in cols:
    cols.remove('Doanh s·ªë v∆∞·ª£t c·∫•p')
    idx_hhvc = cols.index('Hoa h·ªìng v∆∞·ª£t c·∫•p')
    cols.insert(idx_hhvc, 'Doanh s·ªë v∆∞·ª£t c·∫•p')
df = df[cols]

if filter_nganh:
    df = df[df['Nh√≥m kh√°ch h√†ng'].isin(filter_nganh)]

st.markdown("### 2. B·∫£ng d·ªØ li·ªáu ƒë·∫°i l√Ω ƒë√£ x·ª≠ l√Ω")
st.dataframe(df, use_container_width=True, hide_index=True)

# ====== T·∫°o c√°c bi·ªÉu ƒë·ªì (matplotlib) v√† l∆∞u th√†nh c√°c bi·∫øn fig ======
fig1, ax1 = plt.subplots(figsize=(12,5))
ind = np.arange(len(df))
ax1.bar(ind, df['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'], width=0.5, label='T·ªïng b√°n c√° nh√¢n')
ax1.bar(ind, df['override_comm'], width=0.5, bottom=df['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'], label='Hoa h·ªìng h·ªá th·ªëng')
ax1.set_ylabel('S·ªë ti·ªÅn (VND)')
ax1.set_title('T·ªïng b√°n & Hoa h·ªìng h·ªá th·ªëng t·ª´ng c√° nh√¢n')
ax1.set_xticks(ind)
ax1.set_xticklabels(df['T√™n kh√°ch h√†ng'], rotation=60, ha='right')
ax1.legend()

fig2, ax2 = plt.subplots(figsize=(10,5))
df_sorted = df.sort_values('T·ªïng b√°n tr·ª´ tr·∫£ h√†ng', ascending=False)
cum_sum = df_sorted['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'].cumsum()
cum_perc = 100 * cum_sum / df_sorted['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'].sum()
ax2.bar(np.arange(len(df_sorted)), df_sorted['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'], label="Doanh s·ªë")
ax2.set_ylabel('Doanh s·ªë')
ax2.set_xticks(range(len(df_sorted)))
ax2.set_xticklabels(df_sorted['T√™n kh√°ch h√†ng'], rotation=60, ha='right')
ax2_2 = ax2.twinx()
ax2_2.plot(np.arange(len(df_sorted)), cum_perc, color='red', marker='o', label='T√≠ch l≈©y (%)')
ax2_2.set_ylabel('T·ª∑ l·ªá t√≠ch l≈©y (%)')
ax2.set_title('Bi·ªÉu ƒë·ªì Pareto: Doanh s·ªë & t·ª∑ tr·ªçng t√≠ch l≈©y')
fig2.tight_layout()

fig3, ax3 = plt.subplots(figsize=(6,6))
s = df.groupby('Nh√≥m kh√°ch h√†ng')['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'].sum()
ax3.pie(s, labels=s.index, autopct='%1.1f%%')
ax3.set_title('T·ª∑ tr·ªçng doanh s·ªë theo nh√≥m kh√°ch h√†ng')

st.markdown("### 3. Bi·ªÉu ƒë·ªì ph√¢n t√≠ch d·ªØ li·ªáu")
st.pyplot(fig1)
st.pyplot(fig2)
st.pyplot(fig3)

pdf_bytes = BytesIO()
with PdfPages(pdf_bytes) as pdf:
    for fig in [fig1, fig2, fig3]:
        pdf.savefig(fig, bbox_inches='tight')
pdf_bytes.seek(0)
st.download_button(
    "üì• T·∫£i t·∫•t c·∫£ bi·ªÉu ƒë·ªì th√†nh 1 file PDF",
    data=pdf_bytes.getvalue(),
    file_name="all_charts.pdf",
    mime="application/pdf"
)

st.markdown("### 4. T·∫£i file k·∫øt qu·∫£ ƒë·ªãnh d·∫°ng m√†u v∆∞·ª£t c·∫•p & cha‚Äìcon")

output_file = f'sales_report_dep_{uuid.uuid4().hex[:6]}.xlsx'
df_export = df.sort_values(by=['parent_id', 'M√£ kh√°ch h√†ng'], ascending=[True, True], na_position='last')
df_export.to_excel(output_file, index=False)

wb = load_workbook(output_file)
ws = wb.active
col_names = [cell.value for cell in ws[1]]
col_makh = col_names.index('M√£ kh√°ch h√†ng')+1
col_parent = col_names.index('parent_id')+1 if 'parent_id' in col_names else None
col_vuotcap = col_names.index('vuot_cap_trailblazer')+1 if 'vuot_cap_trailblazer' in col_names else None

def pastel_color(seed_val):
    random.seed(str(seed_val))
    h = random.random()
    s = 0.28 + random.random()*0.09
    v = 0.97
    r, g, b = colorsys.hsv_to_rgb(h, s, v)
    return "%02X%02X%02X" % (int(r*255), int(g*255), int(b*255))

trailblazer_vuotcap = set(df['vuot_cap_trailblazer'].dropna().unique()).union(df[df['Nh√≥m kh√°ch h√†ng']=='Trailblazer']['M√£ kh√°ch h√†ng'])
trailblazer_to_color = {tb: PatternFill(start_color=pastel_color(tb+"vuotcap"), end_color=pastel_color(tb+"vuotcap"), fill_type='solid') for tb in trailblazer_vuotcap}

ma_cha_list = df_export[df_export['M√£ kh√°ch h√†ng'].isin(df_export['parent_id'].dropna())]['M√£ kh√°ch h√†ng'].unique().tolist() if col_parent else []
ma_cha_to_color = {ma_cha: PatternFill(start_color=pastel_color(ma_cha), end_color=pastel_color(ma_cha), fill_type='solid') for ma_cha in ma_cha_list}

for row in range(2, ws.max_row + 1):
    ma_kh = str(ws.cell(row=row, column=col_makh).value)
    parent_id = ws.cell(row=row, column=col_parent).value if col_parent else None
    vuotcap_tb = ws.cell(row=row, column=col_vuotcap).value if col_vuotcap else None
    if (vuotcap_tb and vuotcap_tb in trailblazer_to_color):
        fill = trailblazer_to_color[vuotcap_tb]
    elif ma_kh in trailblazer_to_color:
        fill = trailblazer_to_color[ma_kh]
    elif col_parent and ma_kh in ma_cha_to_color:
        fill = ma_cha_to_color[ma_kh]
    elif col_parent and parent_id in ma_cha_to_color:
        fill = ma_cha_to_color[parent_id]
    else:
        fill = PatternFill(fill_type=None)
    for col in range(1, ws.max_column + 1):
        ws.cell(row=row, column=col).fill = fill

header_fill = PatternFill(start_color='FFE699', end_color='FFE699', fill_type='solid')
header_font = Font(bold=True, color='000000')
header_align = Alignment(horizontal='center', vertical='center')
for col in range(1, ws.max_column + 1):
    cell = ws.cell(row=1, column=col)
    cell.fill = header_fill
    cell.font = header_font
    cell.alignment = header_align

cols_to_drop = [
    "vuot_cap_trailblazer", "Lo·∫°i kh√°ch", "Chi nh√°nh t·∫°o", "Khu v·ª±c giao h√†ng", "Ph∆∞·ªùng/X√£", "S·ªë CMND/CCCD",
    "Ng√†y sinh", "Gi·ªõi t√≠nh", "Email", "Facebook", "parent_id", "Ng∆∞·ªùi t·∫°o", "Ng√†y t·∫°o", "T·ªïng b√°n", "Tr·∫°ng th√°i"
]
ws_header = [cell.value for cell in ws[1]]
for col_name in cols_to_drop:
    if col_name in ws_header:
        col_idx = ws_header.index(col_name) + 1
        ws.delete_cols(col_idx)
        ws_header.pop(col_idx - 1)

header_map = {
    "comm_rate": "Chiet_khau",
    "override_rate": "TL_Hoa_Hong",
    "override_comm": "Hoa_hong_he_thong"
}
for col in range(1, ws.max_column + 1):
    cell = ws.cell(row=1, column=col)
    if cell.value in header_map:
        cell.value = header_map[cell.value]

bio = BytesIO()
wb.save(bio)
downloaded = st.download_button(
    label="üì• T·∫£i file Excel ƒë√£ ƒë·ªãnh d·∫°ng",
    data=bio.getvalue(),
    file_name=output_file,
    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
)
if downloaded:
    st.toast("‚úÖ ƒê√£ t·∫£i xu·ªëng!", icon="‚úÖ")
