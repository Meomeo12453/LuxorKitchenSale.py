import streamlit as st
from PIL import Image
import pandas as pd
import numpy as np
from io import BytesIO
from openpyxl import load_workbook
from openpyxl.styles import PatternFill, Alignment, Font
import colorsys
import os
import random

# ======= CSS ƒê∆†N GI·∫¢N ƒê·∫¢M B·∫¢O HI·ªÇN TH·ªä =======
st.set_page_config(page_title="Sales Dashboard MiniApp", layout="wide")
st.markdown("""
    <style>
        .block-container {padding-top:0.9rem;}
        .stApp {background: #F7F8FA;}
        img {border-radius:0 !important;}
    </style>
""", unsafe_allow_html=True)

# ======= HI·ªÇN TH·ªä LOGO, ƒê·∫¢M B·∫¢O LU√îN C√ì FILE LOGO =======
logo_path = "logo-daba.png"  # ƒê·ªïi t√™n file logo ƒë√∫ng
if os.path.exists(logo_path):
    img = Image.open(logo_path)
    desired_height = 38  # pixels, s·ª≠a nh·ªè/l·ªõn t·∫°i ƒë√¢y
    w, h = img.size
    new_width = int((w / h) * desired_height)
    img = img.resize((new_width, desired_height))
    st.markdown("<div style='display:flex;justify-content:center;'><img src='data:image/png;base64," +
        BytesIO(img.tobytes()).getvalue().hex() + "' width='" + str(new_width) +
        "' height='" + str(desired_height) + "'/></div>", unsafe_allow_html=True)
    st.image(img)
else:
    st.warning("‚ùóÔ∏èKh√¥ng t√¨m th·∫•y file logo-daba.png. H√£y upload file logo n√†y v√†o th∆∞ m·ª•c c√πng file app!")

st.markdown("<div style='text-align:center;font-size:16px;color:#1570af;font-weight:600;'>Hotline: 0909.625.808</div>", unsafe_allow_html=True)
st.markdown("<div style='text-align:center;font-size:14px;color:#555;'>ƒê·ªãa ch·ªâ: L·∫ßu 9, Pearl Plaza, 561A ƒêi·ªán Bi√™n Ph·ªß, P.25, Q. B√¨nh Th·∫°nh, TP.HCM</div>", unsafe_allow_html=True)
st.markdown("<hr style='margin:8px 0 18px 0;border:1px solid #EEE;'>", unsafe_allow_html=True)

# ======= CONTROL: BI·ªÇU ƒê·ªí, L·ªåC NH√ìM =======
st.markdown("### T√πy ch·ªçn ph√¢n t√≠ch")
col1, col2 = st.columns([2, 1])
with col1:
    chart_type = st.radio(
        "Ch·ªçn lo·∫°i bi·ªÉu ƒë·ªì:",
        ["Bi·ªÉu ƒë·ªì c·ªôt ch·ªìng", "S∆° ƒë·ªì Sunburst", "Bi·ªÉu ƒë·ªì Pareto", "Bi·ªÉu ƒë·ªì tr√≤n (Pie)"],
        horizontal=True
    )
with col2:
    filter_nganh = st.multiselect("L·ªçc theo nh√≥m kh√°ch h√†ng:", ["Catalyst", "Visionary", "Trailblazer"], default=[])

st.markdown("<hr style='margin:10px 0 18px 0;border:1px solid #EEE;'>", unsafe_allow_html=True)

# ======= UPLOAD NHI·ªÄU FILE EXCEL =======
st.markdown("### 1. T·∫£i l√™n (t·ªëi ƒëa 10) file Excel (.xlsx)")
uploaded_files = st.file_uploader("Ch·ªçn nhi·ªÅu file c√πng l√∫c (ho·∫∑c k√©o th·∫£)", type="xlsx", accept_multiple_files=True)
if not uploaded_files:
    st.info("üí° Vui l√≤ng upload file Excel m·∫´u (c√≥ c·ªôt: M√£ kh√°ch h√†ng, T√™n kh√°ch h√†ng, Nh√≥m kh√°ch h√†ng, T·ªïng b√°n tr·ª´ tr·∫£ h√†ng, Ghi ch√∫)")
    st.stop()

if len(uploaded_files) > 10:
    st.warning("Ch·ªâ upload t·ªëi ƒëa 10 file!")
    st.stop()

# ======= ƒê·ªåC & GH√âP FILE =======
dfs = []
for file in uploaded_files:
    try:
        df = pd.read_excel(file)
        # Chu·∫©n h√≥a c·ªôt
        df.columns = [str(col).strip() for col in df.columns]
        # B·∫Øt bu·ªôc ph·∫£i c√≥ c√°c c·ªôt sau
        required_cols = ['M√£ kh√°ch h√†ng', 'T√™n kh√°ch h√†ng', 'Nh√≥m kh√°ch h√†ng', 'T·ªïng b√°n tr·ª´ tr·∫£ h√†ng', 'Ghi ch√∫']
        for col in required_cols:
            if col not in df.columns:
                st.error(f"File {file.name} thi·∫øu c·ªôt b·∫Øt bu·ªôc: {col}")
                st.stop()
        dfs.append(df)
    except Exception as e:
        st.error(f"File {file.name} kh√¥ng ƒë·ªçc ƒë∆∞·ª£c: {e}")
        st.stop()

df = pd.concat(dfs, ignore_index=True)
df['M√£ kh√°ch h√†ng'] = df['M√£ kh√°ch h√†ng'].astype(str).str.strip()
df['Ghi ch√∫'] = df['Ghi ch√∫'].astype(str).str.strip().replace({'None': None, 'nan': None, 'NaN': None, '': None})
df['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'] = pd.to_numeric(df['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'], errors='coerce').fillna(0)

# ======= X√ÅC ƒê·ªäNH QUAN H·ªÜ H·ªÜ TH·ªêNG THEO "GHI CH√ö" =======
all_codes = set(df['M√£ kh√°ch h√†ng'])
def get_parent_id(x):
    if pd.isnull(x) or x is None: return None
    x = str(x).strip()
    return x if x in all_codes else None
df['parent_id'] = df['Ghi ch√∫'].apply(get_parent_id)

# X√¢y parent_map cho h·ªá th·ªëng ƒëa t·∫ßng
parent_map = {}
for idx, row in df.iterrows():
    pid = row['parent_id']
    code = row['M√£ kh√°ch h√†ng']
    if pd.notnull(pid) and pid is not None:
        parent_map.setdefault(str(pid), []).append(str(code))

def get_all_descendants(code, parent_map):
    result = []
    direct = parent_map.get(str(code), [])
    result.extend(direct)
    for child in direct:
        result.extend(get_all_descendants(child, parent_map))
    return result

desc_counts = []
ds_he_thong = []
for idx, row in df.iterrows():
    code = str(row['M√£ kh√°ch h√†ng'])
    descendants = get_all_descendants(code, parent_map)
    desc_counts.append(len(descendants))
    doanhso = df[df['M√£ kh√°ch h√†ng'].isin(descendants)]['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'].sum() if descendants else 0
    ds_he_thong.append(doanhso)
df['S·ªë c·∫•p d∆∞·ªõi'] = desc_counts
df['Doanh s·ªë h·ªá th·ªëng'] = ds_he_thong

# ======= HOA H·ªíNG =======
network = {
    'Catalyst':     {'comm_rate': 0.35, 'override_rate': 0.00},
    'Visionary':    {'comm_rate': 0.40, 'override_rate': 0.05},
    'Trailblazer':  {'comm_rate': 0.40, 'override_rate': 0.05},
}
df['comm_rate']     = df['Nh√≥m kh√°ch h√†ng'].map(lambda r: network.get(r, {}).get('comm_rate', 0))
df['override_rate'] = df['Nh√≥m kh√°ch h√†ng'].map(lambda r: network.get(r, {}).get('override_rate', 0))
df['override_comm'] = df['Doanh s·ªë h·ªá th·ªëng'] * df['override_rate']

if filter_nganh:
    df = df[df['Nh√≥m kh√°ch h√†ng'].isin(filter_nganh)]

st.markdown("### 2. B·∫£ng d·ªØ li·ªáu ƒë·∫°i l√Ω ƒë√£ x·ª≠ l√Ω")
st.dataframe(df, use_container_width=True, hide_index=True)

# ======= BI·ªÇU ƒê·ªí PH√ÇN T√çCH D·ªÆ LI·ªÜU =======
st.markdown("### 3. Bi·ªÉu ƒë·ªì ph√¢n t√≠ch d·ªØ li·ªáu")
import matplotlib.pyplot as plt
import plotly.express as px
import numpy as np

if chart_type == "Bi·ªÉu ƒë·ªì c·ªôt ch·ªìng":
    fig, ax = plt.subplots(figsize=(12,5))
    ind = np.arange(len(df))
    ax.bar(ind, df['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'], width=0.5, label='T·ªïng b√°n c√° nh√¢n')
    ax.bar(ind, df['override_comm'], width=0.5, bottom=df['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'], label='Hoa h·ªìng h·ªá th·ªëng')
    ax.set_ylabel('S·ªë ti·ªÅn (VND)')
    ax.set_title('T·ªïng b√°n & Hoa h·ªìng h·ªá th·ªëng t·ª´ng c√° nh√¢n')
    ax.set_xticks(ind)
    ax.set_xticklabels(df['T√™n kh√°ch h√†ng'], rotation=60, ha='right')
    ax.legend()
    st.pyplot(fig)

elif chart_type == "S∆° ƒë·ªì Sunburst":
    try:
        fig2 = px.sunburst(
            df,
            path=['Nh√≥m kh√°ch h√†ng', 'T√™n kh√°ch h√†ng'],
            values='T·ªïng b√°n tr·ª´ tr·∫£ h√†ng',
            title="S∆° ƒë·ªì h·ªá th·ªëng c·∫•p b·∫≠c & doanh s·ªë"
        )
        st.plotly_chart(fig2, use_container_width=True)
    except Exception as e:
        st.error(f"L·ªói khi v·∫Ω Sunburst chart: {e}")

elif chart_type == "Bi·ªÉu ƒë·ªì Pareto":
    try:
        df_sorted = df.sort_values('T·ªïng b√°n tr·ª´ tr·∫£ h√†ng', ascending=False)
        cum_sum = df_sorted['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'].cumsum()
        cum_perc = 100 * cum_sum / df_sorted['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'].sum()
        fig3, ax1 = plt.subplots(figsize=(10,5))
        ax1.bar(np.arange(len(df_sorted)), df_sorted['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'], label="Doanh s·ªë")
        ax1.set_ylabel('Doanh s·ªë')
        ax1.set_xticks(range(len(df_sorted)))
        ax1.set_xticklabels(df_sorted['T√™n kh√°ch h√†ng'], rotation=60, ha='right')
        ax2 = ax1.twinx()
        ax2.plot(np.arange(len(df_sorted)), cum_perc, color='red', marker='o', label='T√≠ch l≈©y (%)')
        ax2.set_ylabel('T·ª∑ l·ªá t√≠ch l≈©y (%)')
        ax1.set_title('Bi·ªÉu ƒë·ªì Pareto: Doanh s·ªë & t·ª∑ tr·ªçng t√≠ch l≈©y')
        fig3.tight_layout()
        st.pyplot(fig3)
    except Exception as e:
        st.error(f"L·ªói khi v·∫Ω Pareto chart: {e}")

elif chart_type == "Bi·ªÉu ƒë·ªì tr√≤n (Pie)":
    try:
        fig4, ax4 = plt.subplots(figsize=(6,6))
        s = df.groupby('Nh√≥m kh√°ch h√†ng')['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'].sum()
        ax4.pie(s, labels=s.index, autopct='%1.1f%%')
        ax4.set_title('T·ª∑ tr·ªçng doanh s·ªë theo nh√≥m kh√°ch h√†ng')
        st.pyplot(fig4)
    except Exception as e:
        st.error(f"L·ªói khi v·∫Ω Pie chart: {e}")

st.markdown("<hr style='margin:10px 0 18px 0;border:1px solid #EEE;'>", unsafe_allow_html=True)

# ======= EXPORT FILE M√ÄU NH√ìM (N·∫æU C·∫¶N) =======
output_file = 'sales_report_dep.xlsx'
df.to_excel(output_file, index=False)

from openpyxl import load_workbook
from openpyxl.styles import PatternFill, Alignment, Font

wb = load_workbook(output_file)
ws = wb.active

# T√¥ m√†u nh√≥m theo parent_id (c·∫•p h·ªá th·ªëng)
def pastel_color(seed_val):
    random.seed(str(seed_val))
    h = random.random()
    s = 0.27 + random.random()*0.09
    v = 0.96
    r, g, b = colorsys.hsv_to_rgb(h, s, v)
    return "%02X%02X%02X" % (int(r*255), int(g*255), int(b*255))

col_makh = [cell.value for cell in ws[1]].index('M√£ kh√°ch h√†ng')+1
col_parent = [cell.value for cell in ws[1]].index('parent_id')+1
ma_cha_list = df[df['M√£ kh√°ch h√†ng'].isin(df['parent_id'].dropna())]['M√£ kh√°ch h√†ng'].unique().tolist()
ma_cha_to_color = {ma_cha: PatternFill(start_color=pastel_color(ma_cha), end_color=pastel_color(ma_cha), fill_type='solid') for ma_cha in ma_cha_list}

for row in range(2, ws.max_row + 1):
    ma_kh = str(ws.cell(row=row, column=col_makh).value)
    parent_id = ws.cell(row=row, column=col_parent).value
    if ma_kh in ma_cha_to_color:
        fill = ma_cha_to_color[ma_kh]
    elif parent_id in ma_cha_to_color:
        fill = ma_cha_to_color[parent_id]
    else:
        fill = PatternFill(fill_type=None)
    for col in range(1, ws.max_column + 1):
        ws.cell(row=row, column=col).fill = fill

header_fill = PatternFill(start_color='FFE699', end_color='FFE699', fill_type='solid')
header_font = Font(bold=True, color='000000')
header_align = Alignment(horizontal='center', vertical='center')
for col in range(1, ws.max_column + 1):
    cell = ws.cell(row=1, column=col)
    cell.fill = header_fill
    cell.font = header_font
    cell.alignment = header_align

bio = BytesIO()
wb.save(bio)
st.download_button(
    label="üì• T·∫£i file Excel ƒë√£ ƒë·ªãnh d·∫°ng",
    data=bio.getvalue(),
    file_name=output_file,
    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
)

# ======= FOOTER =======
st.markdown("<hr style='margin:10px 0 18px 0;border:1px solid #EEE;'>", unsafe_allow_html=True)
st.markdown("<div style='text-align:center;font-size:16px;color:#1570af;font-weight:600;'>Hotline: 0909.625.808</div>", unsafe_allow_html=True)
st.markdown("<div style='text-align:center;font-size:14px;color:#555;'>ƒê·ªãa ch·ªâ: L·∫ßu 9, Pearl Plaza, 561A ƒêi·ªán Bi√™n Ph·ªß, P.25, Q. B√¨nh Th·∫°nh, TP.HCM</div>", unsafe_allow_html=True)
