import streamlit as st
from PIL import Image
import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
import colorsys
from io import BytesIO
from openpyxl import load_workbook
from openpyxl.styles import PatternFill, Alignment, Font

# ====== 1. C·∫•u h√¨nh giao di·ªán & logo ======
st.set_page_config(page_title="Sales Dashboard MiniApp", layout="wide")
st.markdown("""
    <style>
    .block-container {padding-top:1.2rem;}
    .stApp {background: #F7F8FA;}
    img { border-radius: 0 !important; }
    </style>
    """, unsafe_allow_html=True)

LOGO_PATHS = ["logo-daba.png"]
logo = None
for path in LOGO_PATHS:
    if os.path.exists(path):
        logo = Image.open(path)
        break
if logo is not None:
    desired_height = 34
    w, h = logo.size
    new_width = int((w / h) * desired_height)
    logo_resized = logo.resize((new_width, desired_height))
    st.markdown("<div style='display:flex;justify-content:center;margin-bottom:12px;'>", unsafe_allow_html=True)
    st.image(logo_resized)
    st.markdown("</div>", unsafe_allow_html=True)

st.markdown(
    "<div style='text-align:center;font-size:16px;color:#1570af;font-weight:600;'>Hotline: 0909.625.808</div>",
    unsafe_allow_html=True)
st.markdown(
    "<div style='text-align:center;font-size:14px;color:#555;'>ƒê·ªãa ch·ªâ: L·∫ßu 9, Pearl Plaza, 561A ƒêi·ªán Bi√™n Ph·ªß, P.25, Q. B√¨nh Th·∫°nh, TP.HCM</div>",
    unsafe_allow_html=True)
st.markdown("<br>", unsafe_allow_html=True)

# ====== 2. Control ph√≠a tr√™n ===========
st.title("Sales Dashboard MiniApp")
st.markdown(
    "<small style='color:gray;'>Dashboard ph√¢n t√≠ch & qu·∫£n tr·ªã ƒë·∫°i l√Ω cho DABA S√†i G√≤n. H·ªó tr·ª£ nh·∫≠p nhi·ªÅu file ‚Äì ph√¢n t√≠ch ‚Äì t·∫£i b√°o c√°o.</small>",
    unsafe_allow_html=True)

col1, col2 = st.columns(2)
with col1:
    chart_type = st.radio("Ch·ªçn bi·ªÉu ƒë·ªì:", ["C·ªôt ch·ªìng", "Sunburst", "Pareto", "Pie"], horizontal=True)
with col2:
    filter_nganh = st.multiselect("L·ªçc theo nh√≥m kh√°ch h√†ng:", ["Catalyst", "Visionary", "Trailblazer"], default=[])

st.markdown("### 1. T·∫£i l√™n t·ªëi ƒëa 10 file Excel (.xlsx) s·∫Ω ƒë∆∞·ª£c t·ªïng h·ª£p t·ª± ƒë·ªông")
uploaded_files = st.file_uploader(
    label="Ch·ªçn 1 ho·∫∑c nhi·ªÅu file Excel (Ctrl/Shift ƒë·ªÉ ch·ªçn nhi·ªÅu, t·ªëi ƒëa 10 file)", 
    type="xlsx", 
    accept_multiple_files=True
)
if not uploaded_files or len(uploaded_files) == 0:
    st.info("üí° H√£y upload t·ª´ 1 ƒë·∫øn 10 file Excel ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
    st.stop()
if len(uploaded_files) > 10:
    st.warning("Vui l√≤ng ch·ªâ upload t·ªëi ƒëa 10 file.")
    st.stop()

# ====== 3. ƒê·ªçc d·ªØ li·ªáu t·ªïng h·ª£p =======
dfs = []
for file in uploaded_files:
    try:
        df_i = pd.read_excel(file)
        df_i["Ngu·ªìn file"] = file.name
        dfs.append(df_i)
    except Exception as e:
        st.error(f"L·ªói khi ƒë·ªçc file {file.name}: {e}")
        st.stop()
col_headers = [tuple(df.columns) for df in dfs]
if not all(c == col_headers[0] for c in col_headers):
    st.error("C√°c file c√≥ c·∫•u tr√∫c c·ªôt kh√°c nhau! H√£y ki·ªÉm tra l·∫°i t√™n c·ªôt ·ªü t·∫•t c·∫£ file.")
    st.write("T√™n c·ªôt t·ª´ng file:", col_headers)
    st.stop()
df = pd.concat(dfs, ignore_index=True)
df['M√£ kh√°ch h√†ng'] = df['M√£ kh√°ch h√†ng'].astype(str)

# ====== 4. T√≠nh c·∫•p d∆∞·ªõi (theo GHI CH√ö/C·∫§U TR√öC H·ªÜ TH·ªêNG) ======
# 1. "C·∫•p d∆∞·ªõi" - x√°c ƒë·ªãnh kh√°ch h√†ng cha theo m√£
def tim_cap_duoi(df):
    cap_duoi = []
    for idx, row in df.iterrows():
        ma_kh = row['M√£ kh√°ch h√†ng']
        captren = None
        maxlen = 0
        for idx2, row2 in df.iterrows():
            ma2 = row2['M√£ kh√°ch h√†ng']
            if ma2 == ma_kh: continue
            # L√Ä C·∫§P TR√äN KHI m√£ KH N√ÄY n·∫±m trong m√£ KH kh√°ch kh√°c, ƒê·ªíNG TH·ªúI s·ªë k√Ω t·ª± ph·∫£i l·ªõn h∆°n (∆∞u ti√™n m√£ d√†i nh·∫•t)
            if ma2 in ma_kh and len(ma2) > maxlen:
                captren = row2['T√™n kh√°ch h√†ng']
                maxlen = len(ma2)
        cap_duoi.append(f"C·∫•p d∆∞·ªõi {captren}" if captren else "")
    return cap_duoi
df["C·∫•p d∆∞·ªõi"] = tim_cap_duoi(df)

# 2. "S·ªë thu·ªôc c·∫•p": ƒë·∫øm t·∫•t c·∫£ KH b·∫Øt ƒë·∫ßu = m√£ KH (tr·ª´ b·∫£n th√¢n)
def so_thuoc_cap(df):
    rs = []
    for idx, row in df.iterrows():
        ma_kh = row['M√£ kh√°ch h√†ng']
        count = (df['M√£ kh√°ch h√†ng'].apply(lambda x: x.startswith(ma_kh)) & (df['M√£ kh√°ch h√†ng'] != ma_kh)).sum()
        rs.append(count)
    return rs
df['S·ªë thu·ªôc c·∫•p'] = so_thuoc_cap(df)

# 3. "Doanh s·ªë h·ªá th·ªëng": c·ªông t·∫•t c·∫£ doanh s·ªë c√°c KH c√≥ m√£ b·∫Øt ƒë·∫ßu = m√£ KH (tr·ª´ ch√≠nh m√¨nh!)
def doanh_so_he_thong(df):
    dsht = []
    for idx, row in df.iterrows():
        ma_kh = row['M√£ kh√°ch h√†ng']
        mask = (df['M√£ kh√°ch h√†ng'].apply(lambda x: x.startswith(ma_kh)) & (df['M√£ kh√°ch h√†ng'] != ma_kh))
        subtotal = df.loc[mask, 'T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'].sum()
        dsht.append(subtotal)
    return dsht
df['Doanh s·ªë h·ªá th·ªëng'] = doanh_so_he_thong(df)

# 4. Ch·ªâ s·ªë hoa h·ªìng (t√πy nh√≥m)
network = {
    'Catalyst':     {'comm_rate': 0.35, 'override_rate': 0.00},
    'Visionary':    {'comm_rate': 0.40, 'override_rate': 0.05},
    'Trailblazer':  {'comm_rate': 0.40, 'override_rate': 0.05},
}
df['comm_rate']     = df['Nh√≥m kh√°ch h√†ng'].map(lambda r: network.get(r, {}).get('comm_rate', 0))
df['override_rate'] = df['Nh√≥m kh√°ch h√†ng'].map(lambda r: network.get(r, {}).get('override_rate', 0))
df['override_comm'] = df['Doanh s·ªë h·ªá th·ªëng'] * df['override_rate']

# ====== 5. L·ªçc n·∫øu c√≥ ======
if filter_nganh:
    df = df[df['Nh√≥m kh√°ch h√†ng'].isin(filter_nganh)]

# ====== 6. Hi·ªÉn th·ªã d·ªØ li·ªáu ======
with st.expander("üìã Gi·∫£i th√≠ch c√°c tr∆∞·ªùng d·ªØ li·ªáu", expanded=False):
    st.markdown("""
    **C√°c tr∆∞·ªùng d·ªØ li·ªáu ch√≠nh:**  
    - `Ngu·ªìn file`: T√™n file g·ªëc nh·∫≠p li·ªáu.
    - `C·∫•p d∆∞·ªõi`: Kh√°ch h√†ng thu·ªôc h·ªá th·ªëng tr·ª±c ti·∫øp d∆∞·ªõi kh√°ch h√†ng n√†y.
    - `S·ªë thu·ªôc c·∫•p`: T·ªïng s·ªë th√†nh vi√™n trong nh√°nh h·ªá th·ªëng.
    - `Doanh s·ªë h·ªá th·ªëng`: T·ªïng doanh s·ªë c·ªßa t·∫•t c·∫£ c·∫•p d∆∞·ªõi thu·ªôc nh√°nh n√†y.
    - `override_comm`: Hoa h·ªìng t·ª´ h·ªá th·ªëng c·∫•p d∆∞·ªõi (√°p d·ª•ng t·ª∑ l·ªá t·ª´ng nh√≥m).
    """)

st.subheader("2. B·∫£ng d·ªØ li·ªáu t·ªïng h·ª£p ƒë√£ x·ª≠ l√Ω")
st.dataframe(df, use_container_width=True, hide_index=True)

# ====== 7. Bi·ªÉu ƒë·ªì tr·ª±c quan ======
st.subheader("3. Bi·ªÉu ƒë·ªì ph√¢n t√≠ch d·ªØ li·ªáu")
if chart_type == "C·ªôt ch·ªìng":
    fig, ax = plt.subplots(figsize=(12,5))
    ind = np.arange(len(df))
    ax.bar(ind, df['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'], width=0.5, label='T·ªïng b√°n c√° nh√¢n')
    ax.bar(ind, df['override_comm'], width=0.5, bottom=df['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'], label='Hoa h·ªìng h·ªá th·ªëng')
    ax.set_ylabel('S·ªë ti·ªÅn (VND)')
    ax.set_title('T·ªïng b√°n & Hoa h·ªìng h·ªá th·ªëng t·ª´ng c√° nh√¢n')
    ax.set_xticks(ind)
    ax.set_xticklabels(df['T√™n kh√°ch h√†ng'], rotation=60, ha='right')
    ax.legend()
    st.pyplot(fig)
elif chart_type == "Sunburst":
    try:
        fig2 = px.sunburst(
            df,
            path=['Nh√≥m kh√°ch h√†ng', 'T√™n kh√°ch h√†ng'],
            values='T·ªïng b√°n tr·ª´ tr·∫£ h√†ng',
            title="S∆° ƒë·ªì h·ªá th·ªëng c·∫•p b·∫≠c & doanh s·ªë"
        )
        st.plotly_chart(fig2, use_container_width=True)
    except Exception as e:
        st.error(f"L·ªói khi v·∫Ω Sunburst chart: {e}")
elif chart_type == "Pareto":
    try:
        df_sorted = df.sort_values('T·ªïng b√°n tr·ª´ tr·∫£ h√†ng', ascending=False)
        cum_sum = df_sorted['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'].cumsum()
        cum_perc = 100 * cum_sum / df_sorted['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'].sum()
        fig3, ax1 = plt.subplots(figsize=(10,5))
        ax1.bar(np.arange(len(df_sorted)), df_sorted['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'], label="Doanh s·ªë")
        ax1.set_ylabel('Doanh s·ªë')
        ax1.set_xticks(range(len(df_sorted)))
        ax1.set_xticklabels(df_sorted['T√™n kh√°ch h√†ng'], rotation=60, ha='right')
        ax2 = ax1.twinx()
        ax2.plot(np.arange(len(df_sorted)), cum_perc, color='red', marker='o', label='T√≠ch l≈©y (%)')
        ax2.set_ylabel('T·ª∑ l·ªá t√≠ch l≈©y (%)')
        ax1.set_title('Bi·ªÉu ƒë·ªì Pareto: Doanh s·ªë & t·ª∑ tr·ªçng t√≠ch l≈©y')
        fig3.tight_layout()
        st.pyplot(fig3)
    except Exception as e:
        st.error(f"L·ªói khi v·∫Ω Pareto chart: {e}")
elif chart_type == "Pie":
    try:
        fig4, ax4 = plt.subplots(figsize=(6,6))
        s = df.groupby('Nh√≥m kh√°ch h√†ng')['T·ªïng b√°n tr·ª´ tr·∫£ h√†ng'].sum()
        ax4.pie(s, labels=s.index, autopct='%1.1f%%')
        ax4.set_title('T·ª∑ tr·ªçng doanh s·ªë theo nh√≥m kh√°ch h√†ng')
        st.pyplot(fig4)
    except Exception as e:
        st.error(f"L·ªói khi v·∫Ω Pie chart: {e}")

# ====== 8. Xu·∫•t file Excel ƒë·∫πp ======
st.subheader("4. T·∫£i file t·ªïng h·ª£p ƒë·ªãnh d·∫°ng m√†u nh√≥m")
output_file = 'sales_report_dep.xlsx'
df.to_excel(output_file, index=False)
wb = load_workbook(output_file)
ws = wb.active
header_fill = PatternFill(start_color='FFE699', end_color='FFE699', fill_type='solid')
header_font = Font(bold=True, color='000000')
header_align = Alignment(horizontal='center', vertical='center')
for col in range(1, ws.max_column + 1):
    cell = ws.cell(row=1, column=col)
    cell.fill = header_fill
    cell.font = header_font
    cell.alignment = header_align

money_keywords = ['b√°n', 'doanh s·ªë', 'ti·ªÅn', 'hoa h·ªìng', 'comm', 'VND']
cols_money = [col[0].column for col in ws.iter_cols(1, ws.max_column)
              if any(key in (col[0].value or '').lower() for key in money_keywords)]

col_makh = [cell.value for cell in ws[1]].index('M√£ kh√°ch h√†ng')+1
col_role = [cell.value for cell in ws[1]].index('Nh√≥m kh√°ch h√†ng')+1

all_codes = [str(ws.cell(row=i, column=col_makh).value) for i in range(2, ws.max_row+1)]
prefix_groups = {}
for length in range(len(max(all_codes, key=len)), 0, -1):
    prefix_count = {}
    for code in all_codes:
        if len(code) < length:
            continue
        prefix = code[:length]
        prefix_count.setdefault(prefix, []).append(code)
    for prefix, codes in prefix_count.items():
        if len(codes) > 1:
            prefix_groups[prefix] = codes

row_to_prefix = {}
for idx, code in enumerate(all_codes):
    best_prefix = ''
    best_len = 0
    for prefix in prefix_groups.keys():
        if code.startswith(prefix) and len(prefix) > best_len:
            best_prefix = prefix
            best_len = len(prefix)
    row_to_prefix[idx+2] = best_prefix if best_prefix else code

prefix_set = set(row_to_prefix.values())
prefix_list = sorted(prefix_set)
def get_contrasting_color(idx, total):
    h = idx / total
    r, g, b = colorsys.hsv_to_rgb(h, 0.65, 1)
    return "%02X%02X%02X" % (int(r*255), int(g*255), int(b*255))
prefix_to_color = {prefix: PatternFill(start_color=get_contrasting_color(i, len(prefix_list)),
                                       end_color=get_contrasting_color(i, len(prefix_list)),
                                       fill_type='solid')
                   for i, prefix in enumerate(prefix_list)}

for row in range(2, ws.max_row + 1):
    role = ws.cell(row=row, column=col_role).value
    if role == 'Trailblazer':
        fill = PatternFill(start_color='FFFFFF', end_color='FFFFFF', fill_type='solid')
    else:
        fill = prefix_to_color[row_to_prefix[row]]
    for col in range(1, ws.max_column + 1):
        ws.cell(row=row, column=col).fill = fill

for col in range(1, ws.max_column + 1):
    for row in range(2, ws.max_row+1):
        cell = ws.cell(row=row, column=col)
        if col in cols_money:
            if isinstance(cell.value, (int, float)):
                cell.number_format = '#,##0'
            cell.alignment = Alignment(horizontal='right', vertical='center')
        else:
            cell.alignment = Alignment(horizontal='center', vertical='center')

for col in ws.columns:
    max_length = 0
    column = col[0].column_letter
    for cell in col:
        val = str(cell.value) if cell.value else ""
        max_length = max(max_length, len(val.encode('utf8'))//2+2)
    ws.column_dimensions[column].width = max(10, min(40, max_length))

bio = BytesIO()
wb.save(bio)
st.download_button(
    label="üì• T·∫£i file Excel t·ªïng h·ª£p ƒë√£ ƒë·ªãnh d·∫°ng",
    data=bio.getvalue(),
    file_name=output_file,
    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
)

# ===== Footer =====
st.markdown("<hr>", unsafe_allow_html=True)
st.markdown(
    "<div style='text-align:center;font-size:16px;color:#1570af;font-weight:600;'>Hotline: 0909.625.808</div>",
    unsafe_allow_html=True)
st.markdown(
    "<div style='text-align:center;font-size:14px;color:#555;'>ƒê·ªãa ch·ªâ: L·∫ßu 9, Pearl Plaza, 561A ƒêi·ªán Bi√™n Ph·ªß, P.25, Q. B√¨nh Th·∫°nh, TP.HCM</div>",
    unsafe_allow_html=True)
